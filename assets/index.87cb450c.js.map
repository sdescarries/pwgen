{"version":3,"file":"index.87cb450c.js","sources":["../../vite/modulepreload-polyfill","../../src/Password/charset.ts","../../src/Password/usePassword.ts","../../src/Password/Password.tsx","../../src/Password/pwgenImpl.ts","../../src/Password/Random.ts","../../src/Password/pwgenFactory.ts","../../src/Password/usePasswordGenerator.tsx","../../src/Password/useDebounce.ts","../../src/DipSwitch/useDipSwitchStorage.ts","../../src/DipSwitch/DipSwitch.tsx","../../src/InfiniScroll/useInfiniScroll.ts","../../src/InfiniScroll/InfiniScroll.tsx","../../src/Length/useLengthStorage.ts","../../src/Length/Length.tsx","../../src/App/App.tsx","../../vite/preload-helper","../../src/reportWebVitals.ts","../../src/main.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { CharsetLabels } from './types';\n\n\nexport const charsetLabels: CharsetLabels = {\n  ['09']: 'Number',\n  ['AZ']: 'Upper Case',\n  ['SM']: 'Symbol',\n};\n\nexport const charsetShorts: CharsetLabels = {\n  ['09']: '9',\n  ['AZ']: 'Z',\n  ['SM']: '#',\n};\n\nexport const alphaLower = 'abcdefghijklmnopqrstuvwxyz';\nexport const alphaUpper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nexport const numerical = '0123456789';\nexport const symbol = '=+-*@$%!&?,.:;^#(){}[]|';\n\nexport const charsetMapping: CharsetLabels = {\n  ['09']: numerical,\n  ['AZ']: alphaUpper,\n  ['SM']: symbol,\n  ['az']: alphaLower,\n};\n\nexport const toRealSet = ([key, value]: [string, boolean]): string => \n  (value ? charsetMapping[key] : '');\n\nexport const getCharset = (...args: string[]): string[] =>\n  Array.from(new Set(args.flat().join('')));\n","import pLimit from 'p-limit';\nimport { useEffect, useState } from 'react';\n\nimport { PasswordProps } from './types';\n\nconst limit = pLimit(1);\nconst sleep = (delay: number) => new Promise(resolve => setTimeout(resolve, delay));\n\nexport function usePassword({ generator, seed }: PasswordProps): string {\n  const [value, set] = useState<string>('');\n\n  useEffect(() => {\n\n    if (generator == null) {\n      return;\n    }\n\n    let live = true;\n    const setIfAlive = (pw: string) => {\n      if (live) {\n        set(pw);\n      }\n    };\n\n    set('');\n    limit(() => Promise\n      .resolve(10)\n      .then(sleep)\n      .then(generator)\n      .then(setIfAlive))\n      .catch(console.warn);\n\n    return () => {\n      live = false;\n      limit.clearQueue();\n    };\n\n  }, [generator, seed]);\n\n  return value;\n}\n","import { PasswordProps } from './types';\nimport { usePassword } from './usePassword';\n\nexport function Password({ generator, seed }: PasswordProps): JSX.Element {\n  const word = usePassword({ generator, seed });\n  const ready = word ? ' Ready' : '';\n  return (<p className={`Password${ready}`} id={`${seed}`}>{word}</p>);\n}\n","import type { Random } from './Random';\n\nexport interface PwgenProps {\n  length: number;\n  charset: string[];\n  random: Random;\n}\n\nexport function pwgenImpl({ length, charset, random }: PwgenProps): string {\n  // Output word\n  let word = '';\n  let prev = -1;\n\n  // Add random chars form set for desired length\n  for (let n = 0; n < length; ++n) {\n    let key;\n\n    // Prevent consecutive chars from being the same\n    do {\n      key = random.pop();\n    } while (key === prev);\n\n    prev = key;\n    word += charset[key];\n  }\n\n  return word;\n}\n","export class Random {\n  array = new Uint32Array(1024);\n  index = 1024;\n  range: number;\n\n  constructor(range: number) {\n    this.range = range;\n  }\n\n  pop(): number {\n    if (this.index >= 1024) {\n      crypto.getRandomValues(this.array);\n      this.index = 0;\n    }\n    return this.array[this.index++] % this.range;\n  }\n}\n","import { getCharset } from './charset';\nimport { pwgenImpl } from './pwgenImpl';\nimport { Random } from './Random';\nimport { pwgen } from './types';\n\n\nexport function pwgenFactory(length: number, ...args: string[]): pwgen {\n\n  if (length === 0) {\n    return (): Promise<string> => Promise.resolve('');\n  }\n\n  if (length < 4) {\n    throw new Error(`length too short ${length}`);\n  }\n\n  const charset = getCharset(...args);\n\n  if (charset.length < 1) {\n    throw new Error('empty charset');\n  }\n\n  if (crypto?.getRandomValues == null) {\n    throw new Error('missing crypto facility');\n  }\n\n  const random = new Random(charset.length);\n\n  return (): Promise<string> =>\n    Promise.resolve({ length, charset, random }).then(pwgenImpl);\n}","import pLimit from 'p-limit';\nimport { useRef, useState } from 'react';\n\nimport { InfiniCell, InfiniGenerator } from '@/InfiniScroll/useInfiniScroll';\n\nimport {\n  alphaLower,\n  toRealSet,\n} from './charset';\nimport { Password } from './Password';\nimport { pwgenFactory } from './pwgenFactory';\nimport { PasswordOptions, PasswordRenderer, PasswordUserOptions, pwgen, UpdatePasswordOptions } from './types';\nimport { useDebounce } from './useDebounce';\n\nconst limit = pLimit(1);\n\nexport const combinePasswordOptions = (\n  oldOptions?: PasswordUserOptions, \n  newOptions?: PasswordUserOptions\n): PasswordOptions => ({\n  charset: {\n    ...oldOptions?.charset,\n    ...newOptions?.charset,\n  },\n  length: newOptions?.length ?? oldOptions?.length ?? 8,\n});\n\nexport const deepEqual = (left: object, right: object): boolean => {\n  const leftStr = JSON.stringify(left);\n  const rightStr = JSON.stringify(right);\n  return leftStr === rightStr;\n};\n\nexport function usePasswordRenderer({ length, charset }: PasswordOptions): PasswordRenderer {\n  const realSets = Object.entries<boolean>(charset).map(toRealSet);\n  const generator = pwgenFactory(length, alphaLower, ...realSets);\n  const renderer: PasswordRenderer = (seed: number) => <Password key={seed} {...{generator, seed}} />;\n  return renderer;\n}\n\nexport function usePasswordGenerator({ length, charset }: PasswordOptions): pwgen {\n  const realSets = Object.entries<boolean>(charset).map(toRealSet);\n  return pwgenFactory(length, alphaLower, ...realSets);\n}\n\ninterface PasswordContext {\n  generator: InfiniGenerator;\n  options: PasswordOptions;\n  update: UpdatePasswordOptions;\n}\n\ninterface Cancelation {\n  live: boolean;\n  timeout?: NodeJS.Timeout;\n  resolve?: () => void;\n}\n\n\nexport function usePasswordContext(): PasswordContext {\n  const pending = useRef<PasswordOptions>({ charset: {}, length: 0 });\n  const [current, setOptions] = useState<PasswordOptions>(pending.current);\n  const debounce = useDebounce(200);\n  const pwgen = usePasswordGenerator(current);\n\n  const generator: InfiniGenerator = (id: number): InfiniCell => {\n\n    const cancelation: Cancelation = {\n      live: true,\n    };\n\n    const value = ''.padEnd(current?.length, '_');\n\n    const infiniCell: InfiniCell = {\n      id,\n      ready: false,\n      value,\n    };\n\n    infiniCell.cancel = () => {\n      cancelation.live = false;\n      delete infiniCell.cancel;\n\n      if (cancelation.resolve) {\n        cancelation.resolve();\n      }\n\n      if (cancelation.timeout != null) {\n        clearTimeout(cancelation.timeout);\n        delete cancelation.timeout;\n      }\n    };\n\n    const spark = () => \n      new Promise<void>(resolve => {\n        cancelation.resolve = resolve;\n        cancelation.timeout = setTimeout(resolve, 10);\n      });\n\n    const work = (): Promise<string> => {\n\n      if (!cancelation.live) {\n        return Promise.resolve(infiniCell.value);\n      }\n\n      return pwgen();\n    };\n\n    const complete = (word: string): string => {\n\n      if (!cancelation.live) {\n        return infiniCell.value;\n      }\n\n      infiniCell.value = word;\n      infiniCell.ready = true;\n\n      delete infiniCell.promise;\n      delete infiniCell.cancel;\n\n      return word;\n    };\n\n    infiniCell.promise = \n      limit(spark)\n        .then(work)\n        .then(complete);\n\n    return infiniCell;\n  };\n\n  const update: UpdatePasswordOptions = (options: PasswordUserOptions) => {\n    pending.current = combinePasswordOptions(pending.current, options);\n\n    console.log(`pending options\\n${JSON.stringify(pending.current, null, 2)}`);\n    debounce(() => {\n      if (!deepEqual(current, pending.current)) {\n\n        console.log(`commit\\n${JSON.stringify(pending.current, null, 2)}`);\n        setOptions(pending.current);\n      }\n    });\n  };\n\n  console.log('generator refreshed');\n\n  return ({\n    generator,\n    options: current,\n    update,\n  });\n}\n","import { useCallback, useEffect, useRef } from 'react';\n\nexport interface DebounceContext {\n  timeout?: number;\n}\n\nexport type DebounceCallback = () => void;\nexport type Debounce = (callback: DebounceCallback) => void;\nexport function useDebounce(delay: number): Debounce {\n  const context = useRef<DebounceContext>({ });\n\n  const debounce = useCallback<Debounce>((callback: DebounceCallback): void => {\n    clearTimeout(context.current.timeout);\n    context.current.timeout = setTimeout(callback, delay) as unknown as number;\n  }, [delay]);\n\n  useEffect(() => () => clearTimeout(context.current.timeout), [delay]);\n\n  return debounce;\n}\n","import { Dispatch, useEffect, useState } from 'react';\n\nimport { CharsetState } from '@/Password/';\n\nexport type UpdateCharsetState = (state: CharsetState) => void;\nexport interface DipSwitchProps {\n  charset: string;\n  update: UpdateCharsetState;\n}\n\nexport const charsetStoragePath = (charset: string): string => \n  `pwgen-charset-${charset}`;\n\n\nexport function loadDipSwitchStorage(charset: string): boolean {\n  try {\n    const serialized = localStorage.getItem(charsetStoragePath(charset)) ?? 'false';\n    return JSON.parse(serialized) as boolean;\n  } catch ({ message }) {\n    console.warn(message);\n    return false;\n  }\n}\n\nexport const saveDipSwitchStorage = (charset: string, value: boolean): Promise<void> => \n  Promise\n    .resolve()\n    .then(() => charsetStoragePath(charset))\n    .then((path) => localStorage.setItem(path, JSON.stringify(value)))\n    .catch(() => undefined);\n\nexport function useDipSwitchStorage({ charset, update }: DipSwitchProps): [boolean, Dispatch<boolean>] {\n\n  const [checked, setChecked] = useState<boolean>(() => loadDipSwitchStorage(charset));\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => update({ [charset]: checked }), []);\n\n  const chainUpdate = (newState: boolean) => {\n    update({ [charset]: newState });\n    setChecked(newState);\n    void saveDipSwitchStorage(charset, newState);\n  };\n\n  const toggle = () => chainUpdate(!checked);\n\n  return [checked, toggle];\n}\n","import { charsetLabels, charsetShorts } from '@/Password/';\n\nimport { \n  DipSwitchProps,\n  useDipSwitchStorage,\n} from './useDipSwitchStorage';\n\nexport interface LabelProps {\n  charset: string;\n  checked: boolean;\n  id: string,\n}\n\nexport function Label({ id, charset, checked }: LabelProps): JSX.Element {\n  const label = charsetLabels[charset];\n  const short = charsetShorts[charset];\n  const hint = `${checked ? 'disable' : 'enable'} ${label} characters`.toLocaleLowerCase();\n  return (\n    <label className={'Frame Flame'} htmlFor={id} title={hint}>\n      <div className={'Large'}>\n        <label className='toggleWrapper' htmlFor={id} >\n          <div className='toggle' />\n        </label>\n        <p className='label'>{label}</p>\n      </div>\n      <div className={'Small'}>\n        <p className='label'>{short}</p>\n      </div>\n    </label>\n  );\n}\n\nexport function DipSwitch(props: DipSwitchProps): JSX.Element {\n  const [checked, toggle] = useDipSwitchStorage(props);\n  const id = `dipSwitch-${props.charset}`;\n  return (\n    <div className={'DipSwitch'} data-testid={id}>\n      <input\n        checked={checked}\n        className={'checkbox'}\n        id={id}\n        onChange={() => toggle(!checked)}\n        type={'checkbox'}\n      />\n      <Label \n        id={id} \n        charset={props.charset} \n        checked={checked} \n      />\n    </div>\n  );\n}\n","import {\n  MutableRefObject,\n  RefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\nexport interface InfiniScrollState {\n  grid: RefObject<HTMLElement>;\n  list: InfiniCell[],\n  loader: RefObject<HTMLElement>;\n  standard: RefObject<HTMLDivElement>;\n}\n\nexport interface InfiniCell {\n\n  // unique identifier for the cell\n  id: number;\n\n  // cell content promise\n  promise?: Promise<string>;\n\n  // content promise cancelation\n  cancel?: () => void;\n\n  // actual value\n  value: string;\n\n  // promise resolution\n  ready: boolean;\n}\n\nexport type InfiniGenerator = (id: number) => InfiniCell;\n\nexport interface ListModifiers {\n  full?: boolean,\n  generator: InfiniGenerator,\n  size: number, \n  slice?: boolean, \n}\n\nexport interface Refresh {\n  done?: boolean,\n  full?: boolean,\n  slice?: boolean,\n}\n\nexport type Refresher = (options?: Refresh) => void;\n\nexport interface ResizeHandlerProps {\n  grid: RefObject<HTMLElement>;\n  refresh: Refresher;\n  size: MutableRefObject<number>;\n  standard: RefObject<HTMLDivElement>;\n}\n\nexport const getLastIndex = (list: InfiniCell[]): number => (list[list.length - 1]?.id ?? -1) + 1;\n\nexport const extendListToSize = (list: InfiniCell[], { generator, size }: ListModifiers): InfiniCell[] => {\n  if (list.length > size) {\n    console.log('reuse list');\n    return list;\n  }\n  list = [...list];\n  let lastIndex = getLastIndex(list);\n\n  console.log(`fill list for  ${size - list.length}`);\n\n  while (list.length < size) {\n    list.push(generator(lastIndex++));\n  }\n  return list;\n};\n\nexport const refreshList = ({ full, size, slice, generator }: ListModifiers) => (list: InfiniCell[]): InfiniCell[] => {\n\n  if (full) {\n    const lastIndex = getLastIndex(list);\n    list.forEach((cell) => cell.cancel?.());\n    list = [generator(lastIndex)];\n  } else if (slice) {\n    const twoThirds = Math.ceil(size * 2 / 3);\n    list.slice(0, twoThirds).forEach((cell) => cell.cancel?.());\n    list = list.slice(list.length - twoThirds);\n  } else if (list.length >= size) {\n    return list;\n  }\n\n  return extendListToSize(list, { generator, size });\n};\n\nexport function useInfiniScrollLoader(refresh: Refresher): [RefObject<HTMLElement>] {\n  const loader = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n\n    if (!loader.current) {\n      console.warn('useInfiniScroll IntersectionObserver not ready');\n      return;\n    }\n\n    const handleIntersection = ([{ isIntersecting }]: IntersectionObserverEntry[]) => {\n      if (isIntersecting) {\n        refresh({ slice: true });\n      }\n    };\n\n    const intersectionObserver = new IntersectionObserver(handleIntersection);\n    intersectionObserver.observe(loader.current);\n\n    return () => intersectionObserver.disconnect();\n\n  }, [refresh]);\n\n  return [loader];\n}\n\nexport function makeResizeHandler({ grid, refresh, size, standard }: ResizeHandlerProps) {\n\n  const context = {\n    cw: 0,\n    ch: 0,\n    iw: 0,\n    ih: 0,\n  };\n\n  const handleResize = (entries: ResizeObserverEntry[]) => {\n\n    for (const { contentRect, target } of entries) {\n      if (target === standard.current) {\n        context.iw = contentRect.width + 8;\n        context.ih = contentRect.height + 8;\n      }\n\n      if (target === grid.current) {\n        context.cw = contentRect.width;\n        context.ch = contentRect.height;\n      }\n    }\n\n    if (context.iw && context.ih) {\n      const rows = Math.floor(context.ch / context.ih);\n      const cols = Math.floor(context.cw / context.iw);\n      const count = Math.floor(rows * cols) * 2;\n\n      if (count > 0 && size.current <= count) {\n        refresh();\n      }\n\n      size.current = count;\n    }\n  };\n\n  return handleResize;\n}\n\nexport function useInfiniScrollSize(refresh: Refresher, size: MutableRefObject<number>): [RefObject<HTMLElement>, RefObject<HTMLDivElement>] {\n  const grid = useRef<HTMLElement>(null);\n  const standard = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n\n    if (!grid.current || !standard.current) {\n      console.warn('useInfiniScroll ResizeObserver not ready');\n      return;\n    }\n\n    const handleResize = makeResizeHandler({ grid, refresh, size, standard });\n    const resizeObserver = new ResizeObserver(handleResize);\n    resizeObserver.observe(grid.current);\n    resizeObserver.observe(standard.current);\n\n    return () => resizeObserver.disconnect();\n\n  }, [refresh, size]);\n\n  return [grid, standard];\n\n}\n\nexport function useInfiniScroll(generator: InfiniGenerator): InfiniScrollState {\n\n  const [list, listUpdate] = useState<InfiniCell[]>([]);\n  const size = useRef<number>(0);\n\n  const [needRefresh, setRefresh] = useState<Refresh>({ done: true });\n  const refresh = useCallback((options?: Refresh) => \n    setRefresh((previous) => \n      ({ ...previous, ...options, done: false })), []);\n\n  const [loader] = useInfiniScrollLoader(refresh);\n  const [grid, standard] = useInfiniScrollSize(refresh, size);\n\n  useEffect(() => refresh({ full: true }), [generator, refresh]);\n\n  useEffect(() => {\n\n    if (needRefresh.done) {\n      return;\n    }\n\n    const cb = () => {\n      setRefresh({ done: true });\n      listUpdate(\n        refreshList({ \n          ...needRefresh, \n          size: size.current, \n          generator,\n        })\n      );\n    };\n\n    const timeout = setTimeout(cb, 500);\n    return () => clearTimeout(timeout);\n\n  }, [generator, needRefresh]);\n\n  return { grid, list, loader, standard };\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { PasswordOptions } from '@/Password';\n\nimport { InfiniCell, InfiniGenerator, useInfiniScroll } from './useInfiniScroll';\n\nexport type renderInfiniScroll = (key: number) => JSX.Element;\n\nexport interface ComponentProps {\n  seed: number;\n  length: number;\n  promise?: Promise<string>;\n  cancel?: () => void;\n}\n\nexport interface InfiniScrollProps {\n  Component: React.FunctionComponent<ComponentProps>;\n  generator: InfiniGenerator;\n  options: PasswordOptions;\n}\n\n\nexport function Cell({ id, value, promise, cancel }: InfiniCell): JSX.Element {\n\n  const [word, update] = useState<string>(value);\n\n  useEffect(() => {\n\n    if (promise) {\n      promise\n        .then((w) => \n          update(w.padEnd(length, '*')))\n        .catch(console.warn);\n    }\n    return cancel;\n\n  }, [promise, cancel]);\n\n  return (<button className={'Password'} id={`${id}`}>{word}</button>);\n}\n\n\nexport function InfiniScroll({ generator, options: { length } }: InfiniScrollProps): JSX.Element {\n  const { \n    grid, \n    list, \n    loader,\n    standard, \n  } = useInfiniScroll(generator);\n\n  const render = useCallback((cell: InfiniCell) => (\n    <Cell key={cell.id} {...cell} {...{ length }} />\n  ), [length]);\n\n  const gauge = useMemo(() => (\n    <div className={'Standard'} ref={standard}>\n      <Cell {...generator(-1)} />\n    </div>\n  ), [generator, standard]);\n\n  return (\n    <section className={'InfiniScroll'} ref={grid}>\n      {gauge}\n      <div className={'Grid'}>\n        {list.map(render)}\n        <nav ref={loader} />\n      </div>\n    </section>\n  );\n}\n","import { useEffect, useState } from 'react';\n\ntype UpdateLength = (length: number) => void;\n\nexport interface LengthProps {\n  update: UpdateLength;\n}\n\nexport const lengthStoragePath = 'pwgen-length';\n\n\nexport function loadLengthStorage(): number {\n  try {\n    const serialized = localStorage.getItem(lengthStoragePath) ?? '8';\n    return JSON.parse(serialized) as number;\n  } catch ({ message }) {\n    console.warn(message);\n    return 8;\n  }\n}\n\nexport const saveLengthStorage = (value: number): Promise<void> => \n  Promise\n    .resolve()\n    .then(() => localStorage.setItem(lengthStoragePath, JSON.stringify(value)))\n    .catch(() => undefined);\n\ninterface LengthMap {\n  [key: number]: number;\n}\n\nconst lengthMap: LengthMap = {\n  8: 12,\n  12: 16,\n  16: 24,\n  24: 32,\n  32: 8,\n};\n\nexport type Toggle = () => void;\n\nexport function useLengthStorage({ update }: LengthProps): [number, Toggle] {\n\n  const [length, setValue] = useState<number>(loadLengthStorage);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => update(length), []);\n\n  const chainUpdate = (newState: number) => {\n    update(newState);\n    setValue(newState);\n    void saveLengthStorage(newState);\n  };\n\n  const toggle = () => chainUpdate(lengthMap[length] ?? 8);\n\n  return [length, toggle];\n}\n","import { LengthProps, useLengthStorage } from './useLengthStorage';\n\nexport function Length(props: LengthProps): JSX.Element {\n\n  const [length, toggle] = useLengthStorage(props);\n\n  const id = 'Length';\n  const hint = 'change the length of the password';\n\n  return (\n    <button\n      className={'Frame Flame Length'} data-testid={id}\n      onClick={() => toggle()}\n      type={'submit'}\n      title={hint}\n    >{length}</button>\n  );\n}\n","import { DipSwitch } from '@/DipSwitch/';\nimport { InfiniScroll } from '@/InfiniScroll/';\nimport { Length } from '@/Length/';\nimport { \n  CharsetState,\n  Password,\n  UpdatePasswordOptions,\n  usePasswordContext,\n} from '@/Password/';\n\nexport interface ControlProps {\n  update: UpdatePasswordOptions;\n}\n\nexport function Control({ update }: ControlProps): JSX.Element {\n  const updateCharset = (charset: CharsetState) => update({ charset });\n  const updateLength = (length: number) => update({length});\n  return (\n    <div className={'Controls'}>\n      <Length update={updateLength}/>\n      <DipSwitch charset={'AZ'} update={updateCharset} />\n      <DipSwitch charset={'09'} update={updateCharset} />\n      <DipSwitch charset={'SM'} update={updateCharset} />\n    </div>\n  );\n}\n\nexport function App(): JSX.Element {\n  const context = usePasswordContext();\n  return (\n    <div className=\"App\">\n      <main>\n        <InfiniScroll {...context} Component={Password} />\n      </main>\n      <header>\n        <Control {...context} />\n      </header>\n    </div>\n  );\n}\n","const scriptRel = 'modulepreload';const seen = {};const base = '/pwgen/';export const __vitePreload = function preload(baseModule, deps) {\n    // @ts-ignore\n    if (!__VITE_IS_MODERN__ || !deps || deps.length === 0) {\n        return baseModule();\n    }\n    return Promise.all(deps.map((dep) => {\n        // @ts-ignore\n        dep = `${base}${dep}`;\n        // @ts-ignore\n        if (dep in seen)\n            return;\n        // @ts-ignore\n        seen[dep] = true;\n        const isCss = dep.endsWith('.css');\n        const cssSelector = isCss ? '[rel=\"stylesheet\"]' : '';\n        // @ts-ignore check if the file is already preloaded by SSR markup\n        if (document.querySelector(`link[href=\"${dep}\"]${cssSelector}`)) {\n            return;\n        }\n        // @ts-ignore\n        const link = document.createElement('link');\n        // @ts-ignore\n        link.rel = isCss ? 'stylesheet' : scriptRel;\n        if (!isCss) {\n            link.as = 'script';\n            link.crossOrigin = '';\n        }\n        link.href = dep;\n        // @ts-ignore\n        document.head.appendChild(link);\n        if (isCss) {\n            return new Promise((res, rej) => {\n                link.addEventListener('load', res);\n                link.addEventListener('error', rej);\n            });\n        }\n    })).then(() => baseModule());\n}","// https://bit.ly/CRA-vitals\nimport type { ReportHandler } from 'web-vitals';\n\nexport function reportWebVitals(onPerfEntry?: ReportHandler): void {\n  if (!(onPerfEntry instanceof Function)) {\n    return;\n  }\n\n  import('web-vitals')\n    .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    })\n    .catch(({ stack }) => console.warn(stack));\n}\n","import '@/main.scss';\n\nimport ReactDOM from 'react-dom';\n\nimport { App } from '@/App';\nimport { reportWebVitals } from '@/reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"names":["relList","document","createElement","supports","link","querySelectorAll","MutationObserver","mutations","mutation","type","node","addedNodes","tagName","rel","observe","childList","subtree","ep","fetchOpts","script","integrity","referrerpolicy","referrerPolicy","crossorigin","credentials","getFetchOpts","href","p","charsetLabels","charsetShorts","charsetMapping","toRealSet","key","value","limit","pLimit","sleep","delay","Promise","setTimeout","resolve","generator","seed","word","set","useState","live","setIfAlive","pw","then","catch","console","warn","clearQueue","usePassword","ready","className","id","length","charset","random","prev","n","length2","pop","constructor","range","Uint32Array","this","index","getRandomValues","array","args","Error","Array","from","Set","flat","join","getCharset","Random","pwgenImpl","pending","useRef","current","setOptions","debounce","context","useCallback","callback","timeout","clearTimeout","useDebounce","pwgen2","pwgenFactory","Object","entries","map","usePasswordGenerator","log","cancelation","infiniCell","padEnd","cancel","promise","options","update","oldOptions","newOptions","__spreadValues","JSON","stringify","left","right","charsetStoragePath","checked","setChecked","serialized","getItem","parse","message","loadDipSwitchStorage","chainUpdate","newState","path","localStorage","setItem","saveDipSwitchStorage","label","short","hint","toLocaleLowerCase","htmlFor","title","props","toggle","useDipSwitchStorage","onChange","Label","getLastIndex","list","refreshList","full","size","slice","lastIndex","forEach","cell","twoThirds","Math","ceil","push","extendListToSize","refresh","grid","standard","handleResize","cw","ch","iw","ih","contentRect","target","width","height","rows","floor","cols","count","makeResizeHandler","resizeObserver","ResizeObserver","disconnect","listUpdate","needRefresh","setRefresh","done","previous","loader","intersectionObserver","IntersectionObserver","isIntersecting","useInfiniScrollLoader","useInfiniScrollSize","__spreadProps","w","useInfiniScroll","render","Cell","gauge","useMemo","ref","lengthMap","setValue","loadLengthStorage","useLengthStorage","onClick","updateCharset","Length","DipSwitch","usePasswordContext","InfiniScroll","Component","Password","Control","seen","onPerfEntry","baseModule","deps","ReactDOM","App","getElementById","Function","all","dep","isCss","endsWith","cssSelector","querySelector","as","crossOrigin","head","appendChild","res","rej","addEventListener","getCLS","getFID","getFCP","getLCP","getTTFB","stack"],"mappings":"kiBAAU,iBACAA,EAAUC,SAASC,cAAc,QAAQF,aAC3CA,GAAWA,EAAQG,UAAYH,EAAQG,SAAS,6BAGzCC,KAAQH,SAASI,iBAAiB,+BAC1BD,OAEfE,kBAAkBC,cACPC,KAAYD,KACG,cAAlBC,EAASC,eAGFC,KAAQF,EAASG,WACH,SAAjBD,EAAKE,SAAmC,kBAAbF,EAAKG,OACjBH,MAG5BI,QAAQb,SAAU,CAAEc,WAAW,EAAMC,SAAS,eAezBZ,MAChBA,EAAKa,YAGJA,IAAK,QAEJC,WApBYC,SACZD,EAAY,UACdC,EAAOC,cACGA,UAAYD,EAAOC,WAC7BD,EAAOE,mBACGC,eAAiBH,EAAOE,gBACX,oBAAvBF,EAAOI,cACGC,YAAc,UACI,cAAvBL,EAAOI,cACFC,YAAc,SAEdA,YAAc,cACrBN,EAQWO,CAAarB,SACzBA,EAAKsB,KAAMR,IAEvBS,SCvCWC,EAA+B,MAClC,YACA,gBACA,UAGGC,EAA+B,MAClC,OACA,OACA,KAQGC,EAAgC,MAHpB,gBADC,gCAEJ,6BAHI,8BAYbC,EAAY,EAAEC,EAAKC,KAC7BA,EAAQH,EAAeE,GAAO,GCvB3BE,EAAQC,EAAO,GACfC,EAASC,GAAkB,IAAIC,YAAmBC,WAAWC,EAASH,iBCHnDI,UAAEA,OAAWC,UAC9BC,YDIoBF,UAAEA,OAAWC,UAChCT,EAAOW,GAAOC,mBAAiB,gCAE5B,QAES,MAAbJ,aAIAK,GAAO,QACLC,EAAcC,IACdF,KACEE,aAIJ,OACE,IAAMV,QACTE,QAAQ,IACRS,KAAKb,GACLa,KAAKR,GACLQ,KAAKF,KACLG,MAAMC,QAAQC,MAEV,QACE,IACDC,gBAGP,CAACZ,EAAWC,IAERT,ECnCMqB,CAAY,CAAEb,UAAAA,EAAWC,KAAAA,IAChCa,EAAQZ,EAAO,SAAW,0BACvB,IAAD,CAAGa,UAAW,WAAWD,IAASE,GAAI,GAAGf,KAASC,eCEhCe,iBAAQC,SAASC,QAEvCjB,EAAO,GACPkB,aAGKC,EAAI,EAAGA,EAAIC,IAAUD,EAAG,KAC3B9B,OAII4B,EAAOI,YACNhC,IAAQ6B,KAEV7B,KACC2B,EAAQ3B,UAGXW,UCrBPsB,YAAYC,cAJJ,IAAIC,YAAY,iBAChB,UAIDD,MAAQA,EAGfF,aACMI,KAAKC,OAAS,cACTC,gBAAgBF,KAAKG,YACvBF,MAAQ,GAERD,KAAKG,MAAMH,KAAKC,SAAWD,KAAKF,kBCRdH,KAAmBS,MAE/B,IAAXT,QACK,IAAuBzB,QAAQE,QAAQ,OAG5CuB,EAAS,QACL,IAAIU,MAAM,oBAAoBV,WAGhCJ,ELckB,KAAIa,IAC5BE,MAAMC,KAAK,IAAIC,IAAIJ,EAAKK,OAAOC,KAAK,MKfpBC,IAAcP,MAE1Bb,EAAQD,OAAS,QACb,IAAIe,MAAM,oBAGa,kCAAnBH,uBACJ,IAAIG,MAAM,iCAGZb,EAAS,IAAIoB,EAAOrB,EAAQD,cAE3B,IACLpB,QAAQE,QAAQ,CAAEkB,SAAQC,QAAAA,EAASC,OAAAA,IAAUX,KAAKgC,GCftD,MAAM/C,EAAQC,EAAO,sBA6Cb+C,EAAUC,iBAAwB,CAAExB,QAAS,GAAID,OAAQ,KACxD0B,EAASC,GAAcxC,mBAA0BqC,EAAQE,SAC1DE,WCrDoBjD,SACpBkD,EAAUJ,iBAAwB,IAElCG,EAAWE,uBAAuBC,iBACzBF,EAAQH,QAAQM,WACrBN,QAAQM,QAAUnD,WAAWkD,EAAUpD,KAC9C,CAACA,gCAEM,IAAM,IAAMsD,aAAaJ,EAAQH,QAAQM,UAAU,CAACrD,IAEvDiD,ED2CUM,CAAY,KACvBC,YAtB+BnC,iBAAQC,WAEtCmC,EAAa/B,EN3BI,gCM0BPgC,OAAOC,QAAiBrC,GAASsC,IAAIlE,IAqBxCmE,CAAqBd,kBAiF3Be,IAAI,uBAEJ,CACN1D,UAlFkCgB,UAE5B2C,EAA2B,CAC/BtD,MAAM,GAKFuD,EAAyB,CAC7B5C,GAAAA,EACAF,OAAO,EACPtB,MALY,GAAGqE,aAAOlB,WAAS1B,OAAQ,YAQrB,OACNZ,MAAO,SACZuD,EAAWE,OAEdH,EAAY5D,WACFA,UAGa,MAAvB4D,EAAYV,uBACDU,EAAYV,gBAClBU,EAAYV,oBAkCZc,QACTtE,GA/BY,IACZ,IAAII,eACUE,QAAUA,IACVkD,QAAUnD,WAAWC,EAAS,SA6BzCS,MA1BQ,IAENmD,EAAYtD,KAIV+C,IAHEvD,QAAQE,QAAQ6D,EAAWpE,SAwBjCgB,MAlBaN,GAEXyD,EAAYtD,QAINb,MAAQU,IACRY,OAAQ,SAEZ8C,EAAWG,eACXH,EAAWE,OAEX5D,GATE0D,EAAWpE,QAiBfoE,GAoBPI,QAASrB,EACTsB,OAlBqCD,IAlHH,IACpCE,EACAC,QAiHUxB,SAlHVuB,EAkH2CzB,EAAQE,QAjHnDwB,EAiH4DH,GA/G5D9C,QAASkD,aACJF,WAAYhD,eACZiD,WAAYjD,SAEjBD,OAAQ,SAAA,0BAAYA,gBAAUiD,WAAYjD,UAAU,YA6G1CyC,IAAI,oBAAoBW,KAAKC,UAAU7B,EAAQE,QAAS,KAAM,SAC7D,KA3GY,IAAC4B,EAAcC,EAAdD,EA4GL5B,EA5GmB6B,EA4GV/B,EAAQE,QA3GpB0B,KAAKC,UAAUC,KACdF,KAAKC,UAAUE,aA4GlBd,IAAI,WAAWW,KAAKC,UAAU7B,EAAQE,QAAS,KAAM,QAClDF,EAAQE,qBEhId8B,EAAsBvD,GACjC,iBAAiBA,gBAoBiBA,QAAEA,SAAS+C,UAEtCS,EAASC,GAAcvE,oBAAkB,aAnBbc,mBAE3B0D,EAAa,sBAAaC,QAAQJ,EAAmBvD,OAAa,eACjEmD,KAAKS,MAAMF,UACXG,QAAEA,mBACDpE,KAAKoE,IACN,GAa6CC,CAAqB9D,0BAGjE,IAAM+C,EAAO,EAAG/C,GAAUwD,KAAY,UAE1CO,EAAeC,MACZ,EAAGhE,GAAUgE,MACTA,GAhBqB,EAAChE,EAAiB1B,KACpDK,QACGE,UACAS,MAAK,IAAMiE,EAAmBvD,KAC9BV,MAAM2E,GAASC,aAAaC,QAAQF,EAAMd,KAAKC,UAAU9E,MACzDiB,OAAM,UAYF6E,CAAqBpE,EAASgE,UAK9B,CAACR,EAFO,IAAMO,GAAaP,gBC/Bd1D,GAAEA,UAAIE,UAASwD,UAC7Ba,EAAQpG,EAAc+B,GACtBsE,EAAQpG,EAAc8B,GACtBuE,EAAO,GAAGf,EAAU,UAAY,YAAYa,eAAmBG,2CAElE,QAAD,CAAO3E,UAAW,cAAe4E,QAAS3E,EAAI4E,MAAOH,mBAClD,MAAD,CAAK1E,UAAW,yBACb,QAAD,CAAOA,UAAU,gBAAgB4E,QAAS3E,mBACvC,MAAD,CAAKD,UAAU,4BAEhB,IAAD,CAAGA,UAAU,SAASwE,oBAEvB,MAAD,CAAKxE,UAAW,yBACb,IAAD,CAAGA,UAAU,SAASyE,gBAMJK,SACjBnB,EAASoB,GAAUC,EAAoBF,GACxC7E,EAAK,aAAa6E,EAAM3E,iCAE3B,MAAD,CAAKH,UAAW,YAAa,cAAaC,mBACvC,QAAD,CACE0D,QAAAA,EACA3D,UAAW,WACXC,GAAAA,EACAgF,SAAU,IAAMF,GAAQpB,GACxB1G,KAAM,6BAEPiI,EAAD,CACEjF,GAAAA,EACAE,QAAS2E,EAAM3E,QACfwD,QAAAA,WCWKwB,EAAgBC,uCAAqCA,EAAKlF,OAAS,aAAID,UAAY,GAkBnFoF,EAAc,EAAGC,KAAAA,EAAMC,KAAAA,EAAMC,MAAAA,EAAOvG,UAAAA,KAAgCmG,OAE3EE,EAAM,OACFG,EAAYN,EAAaC,KAC1BM,SAASC,iBAAS,WAAK5C,8BACrB,CAAC9D,EAAUwG,YACTD,EAAO,OACVI,EAAYC,KAAKC,KAAY,EAAPP,EAAW,KAClCC,MAAM,EAAGI,GAAWF,SAASC,iBAAS,WAAK5C,8BACzCqC,EAAKI,MAAMJ,EAAKlF,OAAS0F,WACvBR,EAAKlF,QAAUqF,SACjBH,QA3BqB,EAACA,GAAsBnG,UAAAA,EAAWsG,KAAAA,SAC5DH,EAAKlF,OAASqF,iBACR5C,IAAI,cACLyC,IAEF,IAAIA,OACPK,EAAYN,EAAaC,eAErBzC,IAAI,mBAAkB4C,EAAOH,EAAKlF,SAEnCkF,EAAKlF,OAASqF,KACdQ,KAAK9G,EAAUwG,aAEfL,GAiBAY,CAAiBZ,EAAM,CAAEnG,UAAAA,EAAWsG,KAAAA,gBAoETU,EAAoBV,SAChDW,EAAOvE,iBAAoB,MAC3BwE,EAAWxE,iBAAuB,kCAE9B,SAEHuE,EAAKtE,UAAYuE,EAASvE,4BACrBhC,KAAK,kDAITwG,YAlDwBF,KAAEA,UAAMD,OAASV,WAAMY,UAEjDpE,EAAU,CACdsE,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,UAGgBhE,cAETiE,YAAEA,SAAaC,KAAYlE,EAChCkE,IAAWP,EAASvE,YACd2E,GAAKE,EAAYE,MAAQ,IACzBH,GAAKC,EAAYG,OAAS,GAGhCF,IAAWR,EAAKtE,YACVyE,GAAKI,EAAYE,QACjBL,GAAKG,EAAYG,WAIzB7E,EAAQwE,IAAMxE,EAAQyE,GAAI,OACtBK,EAAOhB,KAAKiB,MAAM/E,EAAQuE,GAAKvE,EAAQyE,IACvCO,EAAOlB,KAAKiB,MAAM/E,EAAQsE,GAAKtE,EAAQwE,IACvCS,EAAkC,EAA1BnB,KAAKiB,MAAMD,EAAOE,GAE5BC,EAAQ,GAAKzB,EAAK3D,SAAWoF,SAI5BpF,QAAUoF,IAkBIC,CAAkB,CAAEf,KAAAA,EAAMD,QAAAA,EAASV,KAAAA,EAAMY,SAAAA,IACxDe,EAAiB,IAAIC,eAAef,YAC3B9I,QAAQ4I,EAAKtE,WACbtE,QAAQ6I,EAASvE,SAEzB,IAAMsF,EAAeE,eAE3B,CAACnB,EAASV,IAEN,CAACW,EAAMC,cAIgBlH,SAEvBmG,EAAMiC,GAAchI,mBAAuB,IAC5CkG,EAAO5D,iBAAe,IAErB2F,EAAaC,GAAclI,mBAAkB,CAAEmI,MAAM,IACtDvB,EAAUjE,uBAAaiB,GAC3BsE,GAAYE,YACJA,GAAaxE,IAASuE,MAAM,OAAW,KAE1CE,YAnG6BzB,SAC9ByB,EAAS/F,iBAAoB,kCAEzB,SAEH+F,EAAO9F,4BACFhC,KAAK,wDAUT+H,EAAuB,IAAIC,sBANN,GAAIC,eAAAA,OACzBA,KACM,CAAErC,OAAO,gBAKAlI,QAAQoK,EAAO9F,SAE7B,IAAM+F,EAAqBP,eAEjC,CAACnB,IAEG,CAACyB,GA4ESI,CAAsB7B,IAChCC,EAAMC,GAAY4B,EAAoB9B,EAASV,+BAE5C,IAAMU,EAAQ,CAAEX,MAAM,KAAS,CAACrG,EAAWgH,yBAE3C,QAEJqB,EAAYE,kBAeVtF,EAAUnD,YAXL,OACE,CAAEyI,MAAM,MAEjBnC,EAAY2C,OACPV,GADO,CAEV/B,KAAMA,EAAK3D,QACX3C,UAAAA,QAKyB,WACxB,IAAMkD,aAAaD,KAEzB,CAACjD,EAAWqI,IAER,CAAEpB,KAAAA,EAAMd,KAAAA,EAAMsC,OAAAA,EAAQvB,SAAAA,eCrMVlG,GAAEA,QAAIxB,UAAOuE,SAASD,UAElC5D,EAAM+D,GAAU7D,mBAAiBZ,+BAE9B,KAEJuE,KAECvD,MAAMwI,GACL/E,EAAO+E,EAAEnF,OAAO5C,OAAQ,QACzBR,MAAMC,QAAQC,MAEZmD,IAEN,CAACC,EAASD,oBAEJ,SAAD,CAAQ/C,UAAW,WAAYC,GAAI,GAAGA,KAAOd,eAI1BF,UAAEA,EAAWgE,SAAW/C,kBAC7CgG,KACJA,OACAd,SACAsC,WACAvB,GACE+B,EAAgBjJ,GAEdkJ,EAASnG,uBAAa2D,mBACzByC,EAAD/E,KAAM7E,IAAKmH,EAAK1F,IAAQ0F,GAAU,CAAEzF,aACnC,CAACK,IAEE8H,EAAQC,mBAAQ,oBACnB,MAAD,CAAKtI,UAAW,WAAYuI,IAAKpC,mBAC9BiC,EAAD/E,KAAUpE,UAEX,CAACA,EAAWkH,2BAGZ,UAAD,CAASnG,UAAW,eAAgBuI,IAAKrC,GACtCmC,kBACA,MAAD,CAAKrI,UAAW,QACboF,EAAK3C,IAAI0F,mBACT,MAAD,CAAKI,IAAKb,mCCpDR7D,EAAa,sBAAaC,QALH,mBAKiC,WACvDR,KAAKS,MAAMF,UACXG,QAAEA,mBACDpE,KAAKoE,GACN,SAcLwE,EAAuB,CAC3B,EAAG,GACH,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,eAK2BtF,OAAEA,UAE1B3C,EAAQkI,GAAYpJ,mBAAiBqJ,wBAGlC,IAAMxF,EAAO3C,IAAS,UAE1B2D,EAAeC,IA3BU,IAAC1F,IA4BvB0F,KACEA,GA7BqB1F,EA8BP0F,EA7BzBrF,QACGE,UACAS,MAAK,IAAM4E,aAAaC,QAhBI,eAgBuBhB,KAAKC,UAAU9E,MAClEiB,OAAM,gBA+BF,CAACa,EAFO,oBAAkB,WAAUA,MAAW,gBCpDjCuE,SAEdvE,EAAQwE,GAAU4D,EAAiB7D,0BAMvC,SAAD,CACE9E,UAAW,qBAAsB,cAL1B,SAMP4I,QAAS,IAAM7D,IACf9H,KAAM,SACN4H,MAPS,qCAQTtE,eCDkB2C,OAAEA,UAClB2F,EAAiB1I,GAA0B+C,EAAO,CAAE/C,QAAAA,2BAGvD,MAAD,CAAKH,UAAW,4BACb8I,EAAD,CAAQ5F,OAHU3C,GAAmB2C,EAAO,CAAChD,6BAI5C6I,EAAD,CAAW5I,QAAS,KAAM+C,OAAQ2F,oBACjCE,EAAD,CAAW5I,QAAS,KAAM+C,OAAQ2F,oBACjCE,EAAD,CAAW5I,QAAS,KAAM+C,OAAQ2F,wBAMhC9G,EAAUiH,2BAEb,MAAD,CAAKhJ,UAAU,uBACZ,OAAD,qBACGiJ,EAADjB,OAAkBjG,GAAlB,CAA2BmH,UAAWC,sBAEvC,SAAD,qBACGC,EAAD/F,KAAatB,MCnCrB,MAAwCsH,EAAO,OCGfC,EDHuFC,EAAYC,EEOnIC,EAAStB,uBACNuB,EAAD,MACAjN,SAASkN,eAAe,sBDLKC,WDJwFL,yCAAYC,qBAEnGA,GAAwB,IAAhBA,EAAKtJ,OAGlCpB,QAAQ+K,IAAIL,EAAK/G,KAAKqH,UAEnB,UAAUA,OAELT,WAGNS,IAAO,QACNC,EAAQD,EAAIE,SAAS,QACrBC,EAAcF,EAAQ,qBAAuB,MAE/CtN,SAASyN,cAAc,cAAcJ,MAAQG,kBAI3CrN,EAAOH,SAASC,cAAc,iBAE/BW,IAAM0M,EAAQ,aAtBT,gBAuBLA,MACII,GAAK,WACLC,YAAc,MAElBlM,KAAO4L,WAEHO,KAAKC,YAAY1N,GACtBmN,EACO,IAAIjL,SAAQ,CAACyL,EAAKC,OAChBC,iBAAiB,OAAQF,KACzBE,iBAAiB,QAASD,iBAGvC/K,MAAK,IAAM8J,MAjCJA,KCMV9J,MAAK,EAAGiL,OAAAA,EAAQC,OAAAA,EAAQC,OAAAA,EAAQC,OAAAA,EAAQC,QAAAA,QAChCxB,KACAA,KACAA,KACAA,KACCA,MAET5J,OAAM,EAAGqL,MAAAA,KAAYpL,QAAQC,KAAKmL"}