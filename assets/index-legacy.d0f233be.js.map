{"version":3,"file":"index-legacy.d0f233be.js","sources":["../../src/Password/charset.ts","../../src/Password/usePassword.ts","../../src/Password/Password.tsx","../../src/Password/pwgenImpl.ts","../../src/Password/Random.ts","../../src/Password/pwgenFactory.ts","../../src/Password/usePasswordGenerator.tsx","../../src/Password/useDebounce.ts","../../src/DipSwitch/useDipSwitchStorage.ts","../../src/DipSwitch/DipSwitch.tsx","../../src/InfiniScroll/useInfiniScroll.ts","../../src/InfiniScroll/InfiniScroll.tsx","../../src/Length/useLengthStorage.ts","../../src/Length/Length.tsx","../../src/App/App.tsx","../../vite/preload-helper","../../src/reportWebVitals.ts","../../src/main.tsx"],"sourcesContent":["import { CharsetLabels } from './types';\n\n\nexport const charsetLabels: CharsetLabels = {\n  ['09']: 'Number',\n  ['AZ']: 'Upper Case',\n  ['SM']: 'Symbol',\n};\n\nexport const charsetShorts: CharsetLabels = {\n  ['09']: '9',\n  ['AZ']: 'Z',\n  ['SM']: '#',\n};\n\nexport const alphaLower = 'abcdefghijklmnopqrstuvwxyz';\nexport const alphaUpper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nexport const numerical = '0123456789';\nexport const symbol = '=+-*@$%!&?,.:;^#(){}[]|';\n\nexport const charsetMapping: CharsetLabels = {\n  ['09']: numerical,\n  ['AZ']: alphaUpper,\n  ['SM']: symbol,\n  ['az']: alphaLower,\n};\n\nexport const toRealSet = ([key, value]: [string, boolean]): string => \n  (value ? charsetMapping[key] : '');\n\nexport const getCharset = (...args: string[]): string[] =>\n  Array.from(new Set(args.flat().join('')));\n","import pLimit from 'p-limit';\nimport { useEffect, useState } from 'react';\n\nimport { PasswordProps } from './types';\n\nconst limit = pLimit(1);\nconst sleep = (delay: number) => new Promise(resolve => setTimeout(resolve, delay));\n\nexport function usePassword({ generator, seed }: PasswordProps): string {\n  const [value, set] = useState<string>('');\n\n  useEffect(() => {\n\n    if (generator == null) {\n      return;\n    }\n\n    let live = true;\n    const setIfAlive = (pw: string) => {\n      if (live) {\n        set(pw);\n      }\n    };\n\n    set('');\n    limit(() => Promise\n      .resolve(10)\n      .then(sleep)\n      .then(generator)\n      .then(setIfAlive))\n      .catch(console.warn);\n\n    return () => {\n      live = false;\n      limit.clearQueue();\n    };\n\n  }, [generator, seed]);\n\n  return value;\n}\n","import { PasswordProps } from './types';\nimport { usePassword } from './usePassword';\n\nexport function Password({ generator, seed }: PasswordProps): JSX.Element {\n  const word = usePassword({ generator, seed });\n  const ready = word ? ' Ready' : '';\n  return (<p className={`Password${ready}`} id={`${seed}`}>{word}</p>);\n}\n","import type { Random } from './Random';\n\nexport interface PwgenProps {\n  length: number;\n  charset: string[];\n  random: Random;\n}\n\nexport function pwgenImpl({ length, charset, random }: PwgenProps): string {\n  // Output word\n  let word = '';\n  let prev = -1;\n\n  // Add random chars form set for desired length\n  for (let n = 0; n < length; ++n) {\n    let key;\n\n    // Prevent consecutive chars from being the same\n    do {\n      key = random.pop();\n    } while (key === prev);\n\n    prev = key;\n    word += charset[key];\n  }\n\n  return word;\n}\n","export class Random {\n  array = new Uint32Array(1024);\n  index = 1024;\n  range: number;\n\n  constructor(range: number) {\n    this.range = range;\n  }\n\n  pop(): number {\n    if (this.index >= 1024) {\n      crypto.getRandomValues(this.array);\n      this.index = 0;\n    }\n    return this.array[this.index++] % this.range;\n  }\n}\n","import { getCharset } from './charset';\nimport { pwgenImpl } from './pwgenImpl';\nimport { Random } from './Random';\nimport { pwgen } from './types';\n\n\nexport function pwgenFactory(length: number, ...args: string[]): pwgen {\n\n  if (length === 0) {\n    return (): Promise<string> => Promise.resolve('');\n  }\n\n  if (length < 4) {\n    throw new Error(`length too short ${length}`);\n  }\n\n  const charset = getCharset(...args);\n\n  if (charset.length < 1) {\n    throw new Error('empty charset');\n  }\n\n  if (crypto?.getRandomValues == null) {\n    throw new Error('missing crypto facility');\n  }\n\n  const random = new Random(charset.length);\n\n  return (): Promise<string> =>\n    Promise.resolve({ length, charset, random }).then(pwgenImpl);\n}","import pLimit from 'p-limit';\nimport { useRef, useState } from 'react';\n\nimport { InfiniCell, InfiniGenerator } from '@/InfiniScroll/useInfiniScroll';\n\nimport {\n  alphaLower,\n  toRealSet,\n} from './charset';\nimport { Password } from './Password';\nimport { pwgenFactory } from './pwgenFactory';\nimport { PasswordOptions, PasswordRenderer, PasswordUserOptions, pwgen, UpdatePasswordOptions } from './types';\nimport { useDebounce } from './useDebounce';\n\nconst limit = pLimit(1);\n\nexport const combinePasswordOptions = (\n  oldOptions?: PasswordUserOptions, \n  newOptions?: PasswordUserOptions\n): PasswordOptions => ({\n  charset: {\n    ...oldOptions?.charset,\n    ...newOptions?.charset,\n  },\n  length: newOptions?.length ?? oldOptions?.length ?? 8,\n});\n\nexport const deepEqual = (left: object, right: object): boolean => {\n  const leftStr = JSON.stringify(left);\n  const rightStr = JSON.stringify(right);\n  return leftStr === rightStr;\n};\n\nexport function usePasswordRenderer({ length, charset }: PasswordOptions): PasswordRenderer {\n  const realSets = Object.entries<boolean>(charset).map(toRealSet);\n  const generator = pwgenFactory(length, alphaLower, ...realSets);\n  const renderer: PasswordRenderer = (seed: number) => <Password key={seed} {...{generator, seed}} />;\n  return renderer;\n}\n\nexport function usePasswordGenerator({ length, charset }: PasswordOptions): pwgen {\n  const realSets = Object.entries<boolean>(charset).map(toRealSet);\n  return pwgenFactory(length, alphaLower, ...realSets);\n}\n\ninterface PasswordContext {\n  generator: InfiniGenerator;\n  options: PasswordOptions;\n  update: UpdatePasswordOptions;\n}\n\ninterface Cancelation {\n  live: boolean;\n  timeout?: NodeJS.Timeout;\n  resolve?: () => void;\n}\n\n\nexport function usePasswordContext(): PasswordContext {\n  const pending = useRef<PasswordOptions>({ charset: {}, length: 0 });\n  const [current, setOptions] = useState<PasswordOptions>(pending.current);\n  const debounce = useDebounce(200);\n  const pwgen = usePasswordGenerator(current);\n\n  const generator: InfiniGenerator = (id: number): InfiniCell => {\n\n    const cancelation: Cancelation = {\n      live: true,\n    };\n\n    const value = ''.padEnd(current?.length, '_');\n\n    const infiniCell: InfiniCell = {\n      id,\n      ready: false,\n      value,\n    };\n\n    infiniCell.cancel = () => {\n      cancelation.live = false;\n      delete infiniCell.cancel;\n\n      if (cancelation.resolve) {\n        cancelation.resolve();\n      }\n\n      if (cancelation.timeout != null) {\n        clearTimeout(cancelation.timeout);\n        delete cancelation.timeout;\n      }\n    };\n\n    const spark = () => \n      new Promise<void>(resolve => {\n        cancelation.resolve = resolve;\n        cancelation.timeout = setTimeout(resolve, 10);\n      });\n\n    const work = (): Promise<string> => {\n\n      if (!cancelation.live) {\n        return Promise.resolve(infiniCell.value);\n      }\n\n      return pwgen();\n    };\n\n    const complete = (word: string): string => {\n\n      if (!cancelation.live) {\n        return infiniCell.value;\n      }\n\n      infiniCell.value = word;\n      infiniCell.ready = true;\n\n      delete infiniCell.promise;\n      delete infiniCell.cancel;\n\n      return word;\n    };\n\n    infiniCell.promise = \n      limit(spark)\n        .then(work)\n        .then(complete);\n\n    return infiniCell;\n  };\n\n  const update: UpdatePasswordOptions = (options: PasswordUserOptions) => {\n    pending.current = combinePasswordOptions(pending.current, options);\n\n    console.log(`pending options\\n${JSON.stringify(pending.current, null, 2)}`);\n    debounce(() => {\n      if (!deepEqual(current, pending.current)) {\n\n        console.log(`commit\\n${JSON.stringify(pending.current, null, 2)}`);\n        setOptions(pending.current);\n      }\n    });\n  };\n\n  console.log('generator refreshed');\n\n  return ({\n    generator,\n    options: current,\n    update,\n  });\n}\n","import { useCallback, useEffect, useRef } from 'react';\n\nexport interface DebounceContext {\n  timeout?: number;\n}\n\nexport type DebounceCallback = () => void;\nexport type Debounce = (callback: DebounceCallback) => void;\nexport function useDebounce(delay: number): Debounce {\n  const context = useRef<DebounceContext>({ });\n\n  const debounce = useCallback<Debounce>((callback: DebounceCallback): void => {\n    clearTimeout(context.current.timeout);\n    context.current.timeout = setTimeout(callback, delay) as unknown as number;\n  }, [delay]);\n\n  useEffect(() => () => clearTimeout(context.current.timeout), [delay]);\n\n  return debounce;\n}\n","import { Dispatch, useEffect, useState } from 'react';\n\nimport { CharsetState } from '@/Password/';\n\nexport type UpdateCharsetState = (state: CharsetState) => void;\nexport interface DipSwitchProps {\n  charset: string;\n  update: UpdateCharsetState;\n}\n\nexport const charsetStoragePath = (charset: string): string => \n  `pwgen-charset-${charset}`;\n\n\nexport function loadDipSwitchStorage(charset: string): boolean {\n  try {\n    const serialized = localStorage.getItem(charsetStoragePath(charset)) ?? 'false';\n    return JSON.parse(serialized) as boolean;\n  } catch ({ message }) {\n    console.warn(message);\n    return false;\n  }\n}\n\nexport const saveDipSwitchStorage = (charset: string, value: boolean): Promise<void> => \n  Promise\n    .resolve()\n    .then(() => charsetStoragePath(charset))\n    .then((path) => localStorage.setItem(path, JSON.stringify(value)))\n    .catch(() => undefined);\n\nexport function useDipSwitchStorage({ charset, update }: DipSwitchProps): [boolean, Dispatch<boolean>] {\n\n  const [checked, setChecked] = useState<boolean>(() => loadDipSwitchStorage(charset));\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => update({ [charset]: checked }), []);\n\n  const chainUpdate = (newState: boolean) => {\n    update({ [charset]: newState });\n    setChecked(newState);\n    void saveDipSwitchStorage(charset, newState);\n  };\n\n  const toggle = () => chainUpdate(!checked);\n\n  return [checked, toggle];\n}\n","import { charsetLabels, charsetShorts } from '@/Password/';\n\nimport { \n  DipSwitchProps,\n  useDipSwitchStorage,\n} from './useDipSwitchStorage';\n\nexport interface LabelProps {\n  charset: string;\n  checked: boolean;\n  id: string,\n}\n\nexport function Label({ id, charset, checked }: LabelProps): JSX.Element {\n  const label = charsetLabels[charset];\n  const short = charsetShorts[charset];\n  const hint = `${checked ? 'disable' : 'enable'} ${label} characters`.toLocaleLowerCase();\n  return (\n    <label className={'Frame Flame'} htmlFor={id} title={hint}>\n      <div className={'Large'}>\n        <label className='toggleWrapper' htmlFor={id} >\n          <div className='toggle' />\n        </label>\n        <p className='label'>{label}</p>\n      </div>\n      <div className={'Small'}>\n        <p className='label'>{short}</p>\n      </div>\n    </label>\n  );\n}\n\nexport function DipSwitch(props: DipSwitchProps): JSX.Element {\n  const [checked, toggle] = useDipSwitchStorage(props);\n  const id = `dipSwitch-${props.charset}`;\n  return (\n    <div className={'DipSwitch'} data-testid={id}>\n      <input\n        checked={checked}\n        className={'checkbox'}\n        id={id}\n        onChange={() => toggle(!checked)}\n        type={'checkbox'}\n      />\n      <Label \n        id={id} \n        charset={props.charset} \n        checked={checked} \n      />\n    </div>\n  );\n}\n","import {\n  MutableRefObject,\n  RefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\nexport interface InfiniScrollState {\n  grid: RefObject<HTMLElement>;\n  list: InfiniCell[],\n  loader: RefObject<HTMLElement>;\n  standard: RefObject<HTMLDivElement>;\n}\n\nexport interface InfiniCell {\n\n  // unique identifier for the cell\n  id: number;\n\n  // cell content promise\n  promise?: Promise<string>;\n\n  // content promise cancelation\n  cancel?: () => void;\n\n  // actual value\n  value: string;\n\n  // promise resolution\n  ready: boolean;\n}\n\nexport type InfiniGenerator = (id: number) => InfiniCell;\n\nexport interface ListModifiers {\n  full?: boolean,\n  generator: InfiniGenerator,\n  size: number, \n  slice?: boolean, \n}\n\nexport interface Refresh {\n  done?: boolean,\n  full?: boolean,\n  slice?: boolean,\n}\n\nexport type Refresher = (options?: Refresh) => void;\n\nexport interface ResizeHandlerProps {\n  grid: RefObject<HTMLElement>;\n  refresh: Refresher;\n  size: MutableRefObject<number>;\n  standard: RefObject<HTMLDivElement>;\n}\n\nexport const getLastIndex = (list: InfiniCell[]): number => (list[list.length - 1]?.id ?? -1) + 1;\n\nexport const extendListToSize = (list: InfiniCell[], { generator, size }: ListModifiers): InfiniCell[] => {\n  if (list.length > size) {\n    console.log('reuse list');\n    return list;\n  }\n  list = [...list];\n  let lastIndex = getLastIndex(list);\n\n  console.log(`fill list for  ${size - list.length}`);\n\n  while (list.length < size) {\n    list.push(generator(lastIndex++));\n  }\n  return list;\n};\n\nexport const refreshList = ({ full, size, slice, generator }: ListModifiers) => (list: InfiniCell[]): InfiniCell[] => {\n\n  if (full) {\n    const lastIndex = getLastIndex(list);\n    list.forEach((cell) => cell.cancel?.());\n    list = [generator(lastIndex)];\n  } else if (slice) {\n    const twoThirds = Math.ceil(size * 2 / 3);\n    list.slice(0, twoThirds).forEach((cell) => cell.cancel?.());\n    list = list.slice(list.length - twoThirds);\n  } else if (list.length >= size) {\n    return list;\n  }\n\n  return extendListToSize(list, { generator, size });\n};\n\nexport function useInfiniScrollLoader(refresh: Refresher): [RefObject<HTMLElement>] {\n  const loader = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n\n    if (!loader.current) {\n      console.warn('useInfiniScroll IntersectionObserver not ready');\n      return;\n    }\n\n    const handleIntersection = ([{ isIntersecting }]: IntersectionObserverEntry[]) => {\n      if (isIntersecting) {\n        refresh({ slice: true });\n      }\n    };\n\n    const intersectionObserver = new IntersectionObserver(handleIntersection);\n    intersectionObserver.observe(loader.current);\n\n    return () => intersectionObserver.disconnect();\n\n  }, [refresh]);\n\n  return [loader];\n}\n\nexport function makeResizeHandler({ grid, refresh, size, standard }: ResizeHandlerProps) {\n\n  const context = {\n    cw: 0,\n    ch: 0,\n    iw: 0,\n    ih: 0,\n  };\n\n  const handleResize = (entries: ResizeObserverEntry[]) => {\n\n    for (const { contentRect, target } of entries) {\n      if (target === standard.current) {\n        context.iw = contentRect.width + 8;\n        context.ih = contentRect.height + 8;\n      }\n\n      if (target === grid.current) {\n        context.cw = contentRect.width;\n        context.ch = contentRect.height;\n      }\n    }\n\n    if (context.iw && context.ih) {\n      const rows = Math.floor(context.ch / context.ih);\n      const cols = Math.floor(context.cw / context.iw);\n      const count = Math.floor(rows * cols) * 2;\n\n      if (count > 0 && size.current <= count) {\n        refresh();\n      }\n\n      size.current = count;\n    }\n  };\n\n  return handleResize;\n}\n\nexport function useInfiniScrollSize(refresh: Refresher, size: MutableRefObject<number>): [RefObject<HTMLElement>, RefObject<HTMLDivElement>] {\n  const grid = useRef<HTMLElement>(null);\n  const standard = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n\n    if (!grid.current || !standard.current) {\n      console.warn('useInfiniScroll ResizeObserver not ready');\n      return;\n    }\n\n    const handleResize = makeResizeHandler({ grid, refresh, size, standard });\n    const resizeObserver = new ResizeObserver(handleResize);\n    resizeObserver.observe(grid.current);\n    resizeObserver.observe(standard.current);\n\n    return () => resizeObserver.disconnect();\n\n  }, [refresh, size]);\n\n  return [grid, standard];\n\n}\n\nexport function useInfiniScroll(generator: InfiniGenerator): InfiniScrollState {\n\n  const [list, listUpdate] = useState<InfiniCell[]>([]);\n  const size = useRef<number>(0);\n\n  const [needRefresh, setRefresh] = useState<Refresh>({ done: true });\n  const refresh = useCallback((options?: Refresh) => \n    setRefresh((previous) => \n      ({ ...previous, ...options, done: false })), []);\n\n  const [loader] = useInfiniScrollLoader(refresh);\n  const [grid, standard] = useInfiniScrollSize(refresh, size);\n\n  useEffect(() => refresh({ full: true }), [generator, refresh]);\n\n  useEffect(() => {\n\n    if (needRefresh.done) {\n      return;\n    }\n\n    const cb = () => {\n      setRefresh({ done: true });\n      listUpdate(\n        refreshList({ \n          ...needRefresh, \n          size: size.current, \n          generator,\n        })\n      );\n    };\n\n    const timeout = setTimeout(cb, 500);\n    return () => clearTimeout(timeout);\n\n  }, [generator, needRefresh]);\n\n  return { grid, list, loader, standard };\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { PasswordOptions } from '@/Password';\n\nimport { InfiniCell, InfiniGenerator, useInfiniScroll } from './useInfiniScroll';\n\nexport type renderInfiniScroll = (key: number) => JSX.Element;\n\nexport interface ComponentProps {\n  seed: number;\n  length: number;\n  promise?: Promise<string>;\n  cancel?: () => void;\n}\n\nexport interface InfiniScrollProps {\n  Component: React.FunctionComponent<ComponentProps>;\n  generator: InfiniGenerator;\n  options: PasswordOptions;\n}\n\n\nexport function Cell({ id, value, promise, cancel }: InfiniCell): JSX.Element {\n\n  const [word, update] = useState<string>(value);\n\n  useEffect(() => {\n\n    if (promise) {\n      promise\n        .then((w) => \n          update(w.padEnd(length, '*')))\n        .catch(console.warn);\n    }\n    return cancel;\n\n  }, [promise, cancel]);\n\n  return (<button className={'Password'} id={`${id}`}>{word}</button>);\n}\n\n\nexport function InfiniScroll({ generator, options: { length } }: InfiniScrollProps): JSX.Element {\n  const { \n    grid, \n    list, \n    loader,\n    standard, \n  } = useInfiniScroll(generator);\n\n  const render = useCallback((cell: InfiniCell) => (\n    <Cell key={cell.id} {...cell} {...{ length }} />\n  ), [length]);\n\n  const gauge = useMemo(() => (\n    <div className={'Standard'} ref={standard}>\n      <Cell {...generator(-1)} />\n    </div>\n  ), [generator, standard]);\n\n  return (\n    <section className={'InfiniScroll'} ref={grid}>\n      {gauge}\n      <div className={'Grid'}>\n        {list.map(render)}\n        <nav ref={loader} />\n      </div>\n    </section>\n  );\n}\n","import { useEffect, useState } from 'react';\n\ntype UpdateLength = (length: number) => void;\n\nexport interface LengthProps {\n  update: UpdateLength;\n}\n\nexport const lengthStoragePath = 'pwgen-length';\n\n\nexport function loadLengthStorage(): number {\n  try {\n    const serialized = localStorage.getItem(lengthStoragePath) ?? '8';\n    return JSON.parse(serialized) as number;\n  } catch ({ message }) {\n    console.warn(message);\n    return 8;\n  }\n}\n\nexport const saveLengthStorage = (value: number): Promise<void> => \n  Promise\n    .resolve()\n    .then(() => localStorage.setItem(lengthStoragePath, JSON.stringify(value)))\n    .catch(() => undefined);\n\ninterface LengthMap {\n  [key: number]: number;\n}\n\nconst lengthMap: LengthMap = {\n  8: 12,\n  12: 16,\n  16: 24,\n  24: 32,\n  32: 8,\n};\n\nexport type Toggle = () => void;\n\nexport function useLengthStorage({ update }: LengthProps): [number, Toggle] {\n\n  const [length, setValue] = useState<number>(loadLengthStorage);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => update(length), []);\n\n  const chainUpdate = (newState: number) => {\n    update(newState);\n    setValue(newState);\n    void saveLengthStorage(newState);\n  };\n\n  const toggle = () => chainUpdate(lengthMap[length] ?? 8);\n\n  return [length, toggle];\n}\n","import { LengthProps, useLengthStorage } from './useLengthStorage';\n\nexport function Length(props: LengthProps): JSX.Element {\n\n  const [length, toggle] = useLengthStorage(props);\n\n  const id = 'Length';\n  const hint = 'change the length of the password';\n\n  return (\n    <button\n      className={'Frame Flame Length'} data-testid={id}\n      onClick={() => toggle()}\n      type={'submit'}\n      title={hint}\n    >{length}</button>\n  );\n}\n","import { DipSwitch } from '@/DipSwitch/';\nimport { InfiniScroll } from '@/InfiniScroll/';\nimport { Length } from '@/Length/';\nimport { \n  CharsetState,\n  Password,\n  UpdatePasswordOptions,\n  usePasswordContext,\n} from '@/Password/';\n\nexport interface ControlProps {\n  update: UpdatePasswordOptions;\n}\n\nexport function Control({ update }: ControlProps): JSX.Element {\n  const updateCharset = (charset: CharsetState) => update({ charset });\n  const updateLength = (length: number) => update({length});\n  return (\n    <div className={'Controls'}>\n      <Length update={updateLength}/>\n      <DipSwitch charset={'AZ'} update={updateCharset} />\n      <DipSwitch charset={'09'} update={updateCharset} />\n      <DipSwitch charset={'SM'} update={updateCharset} />\n    </div>\n  );\n}\n\nexport function App(): JSX.Element {\n  const context = usePasswordContext();\n  return (\n    <div className=\"App\">\n      <main>\n        <InfiniScroll {...context} Component={Password} />\n      </main>\n      <header>\n        <Control {...context} />\n      </header>\n    </div>\n  );\n}\n","const scriptRel = 'modulepreload';const seen = {};const base = '/pwgen/';export const __vitePreload = function preload(baseModule, deps) {\n    // @ts-ignore\n    if (!__VITE_IS_MODERN__ || !deps || deps.length === 0) {\n        return baseModule();\n    }\n    return Promise.all(deps.map((dep) => {\n        // @ts-ignore\n        dep = `${base}${dep}`;\n        // @ts-ignore\n        if (dep in seen)\n            return;\n        // @ts-ignore\n        seen[dep] = true;\n        const isCss = dep.endsWith('.css');\n        const cssSelector = isCss ? '[rel=\"stylesheet\"]' : '';\n        // @ts-ignore check if the file is already preloaded by SSR markup\n        if (document.querySelector(`link[href=\"${dep}\"]${cssSelector}`)) {\n            return;\n        }\n        // @ts-ignore\n        const link = document.createElement('link');\n        // @ts-ignore\n        link.rel = isCss ? 'stylesheet' : scriptRel;\n        if (!isCss) {\n            link.as = 'script';\n            link.crossOrigin = '';\n        }\n        link.href = dep;\n        // @ts-ignore\n        document.head.appendChild(link);\n        if (isCss) {\n            return new Promise((res, rej) => {\n                link.addEventListener('load', res);\n                link.addEventListener('error', rej);\n            });\n        }\n    })).then(() => baseModule());\n}","// https://bit.ly/CRA-vitals\nimport type { ReportHandler } from 'web-vitals';\n\nexport function reportWebVitals(onPerfEntry?: ReportHandler): void {\n  if (!(onPerfEntry instanceof Function)) {\n    return;\n  }\n\n  import('web-vitals')\n    .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    })\n    .catch(({ stack }) => console.warn(stack));\n}\n","import '@/main.scss';\n\nimport ReactDOM from 'react-dom';\n\nimport { App } from '@/App';\nimport { reportWebVitals } from '@/reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"names":["charsetLabels","charsetShorts","alphaLower","charsetMapping","toRealSet","key","getCharset","args","Array","from","Set","flat","join","limit","pLimit","sleep","delay","Promise","setTimeout","resolve","generator","seed","word","useState","value","set","live","setIfAlive","pw","then","catch","console","warn","clearQueue","usePassword","ready","className","id","length","charset","random","prev","n","pop","range","Uint32Array","this","index","getRandomValues","array","Error","crypto","Random","pwgenImpl","realSets","Object","entries","map","pwgenFactory","pending","useRef","current","setOptions","debounce","context","useCallback","callback","timeout","clearTimeout","useDebounce","pwgen2","usePasswordGenerator","log","cancelation","infiniCell","padEnd","cancel","promise","options","update","oldOptions","newOptions","JSON","stringify","left","right","charsetStoragePath","serialized","localStorage","getItem","parse","message","loadDipSwitchStorage","checked","setChecked","chainUpdate","newState","path","setItem","saveDipSwitchStorage","label","short","hint","toLocaleLowerCase","htmlFor","title","props","useDipSwitchStorage","toggle","onChange","type","Label","getLastIndex","list","refreshList","full","size","slice","lastIndex","forEach","cell","_cell$cancel","twoThirds","Math","ceil","_cell$cancel2","push","extendListToSize","refresh","grid","standard","handleResize","cw","ch","iw","ih","contentRect","target","width","height","rows","floor","cols","count","makeResizeHandler","resizeObserver","ResizeObserver","observe","disconnect","listUpdate","done","needRefresh","setRefresh","previous","loader","intersectionObserver","IntersectionObserver","isIntersecting","useInfiniScrollLoader","useInfiniScrollSize","w","useInfiniScroll","render","Cell","length2","gauge","useMemo","ref","lengthStoragePath","lengthMap","loadLengthStorage","setValue","useLengthStorage","onClick","updateCharset","Length","DipSwitch","usePasswordContext","InfiniScroll","Component","Password","Control","onPerfEntry","baseModule","ReactDOM","App","document","getElementById","Function","getCLS","getFID","getFCP","getLCP","getTTFB","stack"],"mappings":"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"}