{"version":3,"file":"index.0b6e319e.js","sources":["../../vite/modulepreload-polyfill","../../src/Password/charset.ts","../../src/Password/pwgenImpl.ts","../../src/Password/Random.ts","../../src/Password/pwgenFactory.ts","../../src/Password/usePasswordGenerator.tsx","../../src/Password/useDebounce.ts","../../src/DipSwitch/useDipSwitchStorage.ts","../../src/DipSwitch/DipSwitch.tsx","../../src/InfiniScroll/useInfiniScroll.ts","../../src/InfiniScroll/InfiniScroll.tsx","../../src/Length/useLengthStorage.ts","../../src/Length/Length.tsx","../../src/App/App.tsx","../../vite/preload-helper","../../src/reportWebVitals.ts","../../src/main.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { CharsetLabels } from './types';\n\nexport const charsetLabels: CharsetLabels = {\n  ['09']: 'Number',\n  ['AZ']: 'Upper Case',\n  ['SM']: 'Symbol',\n};\n\nexport const charsetShorts: CharsetLabels = {\n  ['09']: '9',\n  ['AZ']: 'Z',\n  ['SM']: '#',\n};\n\nexport const alphaLower = 'abcdefghijklmnopqrstuvwxyz';\nexport const alphaUpper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nexport const numerical = '0123456789';\nexport const symbol = '=+-*@$%!&?,.:;^#(){}[]|';\n\nexport const charsetMapping: CharsetLabels = {\n  ['09']: numerical,\n  ['AZ']: alphaUpper,\n  ['SM']: symbol,\n  ['az']: alphaLower,\n};\n\nexport const toRealSet = ([key, value]: [string, boolean]): string => \n  (value ? charsetMapping[key] : '');\n\nexport const getCharset = (...args: string[]): string[] =>\n  Array.from(new Set(args.flat().join('')));\n","import type { Random } from './Random';\n\nexport interface PwgenProps {\n  length: number;\n  charset: string[];\n  random: Random;\n}\n\nexport function pwgenImpl({ length, charset, random }: PwgenProps): string {\n  // Output word\n  let word = '';\n  let prev = -1;\n\n  // Add random chars form set for desired length\n  for (let n = 0; n < length; ++n) {\n    let key;\n\n    // Prevent consecutive chars from being the same\n    do {\n      key = random.pop();\n    } while (key === prev);\n\n    prev = key;\n    word += charset[key];\n  }\n\n  return word;\n}\n","export class Random {\n  array = new Uint32Array(1024);\n  index = 1024;\n  range: number;\n\n  constructor(range: number) {\n    this.range = range;\n  }\n\n  pop(): number {\n    if (this.index >= 1024) {\n      crypto.getRandomValues(this.array);\n      this.index = 0;\n    }\n    return this.array[this.index++] % this.range;\n  }\n}\n","import { getCharset } from './charset';\nimport { pwgenImpl } from './pwgenImpl';\nimport { Random } from './Random';\nimport { WordGenerator } from './types';\n\n\nexport function pwgenFactory(length: number, ...args: string[]): WordGenerator {\n\n  if (length === 0) {\n    return (): Promise<string> => Promise.resolve('');\n  }\n\n  if (length < 4) {\n    throw new Error(`length too short ${length}`);\n  }\n\n  const charset = getCharset(...args);\n\n  if (charset.length < 1) {\n    throw new Error('empty charset');\n  }\n\n  if (crypto?.getRandomValues == null) {\n    throw new Error('missing crypto facility');\n  }\n\n  const random = new Random(charset.length);\n\n  return (): Promise<string> =>\n    Promise.resolve({ length, charset, random }).then(pwgenImpl);\n}","import { useRef, useState } from 'react';\n\nimport { \n  alphaLower, \n  toRealSet,\n} from './charset';\nimport { pwgenFactory } from './pwgenFactory';\nimport { \n  PasswordOptions, \n  PasswordUserOptions, \n  UpdatePasswordOptions, \n  WordGenerator,\n} from './types';\nimport { useDebounce } from './useDebounce';\n\nexport const combinePasswordOptions = (\n  oldOptions?: PasswordUserOptions, \n  newOptions?: PasswordUserOptions\n): PasswordOptions => ({\n  charset: {\n    ...oldOptions?.charset,\n    ...newOptions?.charset,\n  },\n  length: newOptions?.length ?? oldOptions?.length ?? 8,\n});\n\nexport const deepEqual = (left: object, right: object): boolean => {\n  const leftStr = JSON.stringify(left);\n  const rightStr = JSON.stringify(right);\n  return leftStr === rightStr;\n};\n\nexport function usePasswordGenerator({ length, charset }: PasswordOptions): WordGenerator {\n  const realSets = Object.entries<boolean>(charset).map(toRealSet);\n  return pwgenFactory(length, alphaLower, ...realSets);\n}\n\ninterface PasswordContext extends PasswordOptions {\n  generator: WordGenerator;\n  update: UpdatePasswordOptions;\n}\n\nexport function usePasswordContext(): PasswordContext {\n  const pending = useRef<PasswordOptions>({ charset: {}, length: 0 });\n  const [current, setOptions] = useState<PasswordOptions>(pending.current);\n  const debounce = useDebounce(200);\n  const generator = usePasswordGenerator(current);\n\n  const update: UpdatePasswordOptions = (options: PasswordUserOptions) => {\n    pending.current = combinePasswordOptions(pending.current, options);\n    debounce(() => {\n      if (!deepEqual(current, pending.current)) {\n        setOptions(pending.current);\n      }\n    });\n  };\n\n  return ({\n    ...current,\n    generator,\n    update,\n  });\n}\n","import { useCallback, useEffect, useRef } from 'react';\n\nexport interface DebounceContext {\n  timeout?: number;\n}\n\nexport type DebounceCallback = () => void;\nexport type Debounce = (callback: DebounceCallback) => void;\nexport function useDebounce(delay: number): Debounce {\n  const context = useRef<DebounceContext>({ });\n\n  const debounce = useCallback<Debounce>((callback: DebounceCallback): void => {\n    clearTimeout(context.current.timeout);\n    context.current.timeout = setTimeout(callback, delay) as unknown as number;\n  }, [delay]);\n\n  useEffect(() => () => clearTimeout(context.current.timeout), [delay]);\n\n  return debounce;\n}\n","import { Dispatch, useEffect, useState } from 'react';\n\nimport { CharsetState } from '@/Password/';\n\nexport type UpdateCharsetState = (state: CharsetState) => void;\nexport interface DipSwitchProps {\n  charset: string;\n  update: UpdateCharsetState;\n}\n\nexport const charsetStoragePath = (charset: string): string => \n  `pwgen-charset-${charset}`;\n\n\nexport function loadDipSwitchStorage(charset: string): boolean {\n  try {\n    const serialized = localStorage.getItem(charsetStoragePath(charset)) ?? 'false';\n    return JSON.parse(serialized) as boolean;\n  } catch ({ message }) {\n    console.warn(message);\n    return false;\n  }\n}\n\nexport const saveDipSwitchStorage = (charset: string, value: boolean): Promise<void> => \n  Promise\n    .resolve()\n    .then(() => charsetStoragePath(charset))\n    .then((path) => localStorage.setItem(path, JSON.stringify(value)))\n    .catch(() => undefined);\n\nexport function useDipSwitchStorage({ charset, update }: DipSwitchProps): [boolean, Dispatch<boolean>] {\n\n  const [checked, setChecked] = useState<boolean>(() => loadDipSwitchStorage(charset));\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => update({ [charset]: checked }), []);\n\n  const chainUpdate = (newState: boolean) => {\n    update({ [charset]: newState });\n    setChecked(newState);\n    void saveDipSwitchStorage(charset, newState);\n  };\n\n  const toggle = () => chainUpdate(!checked);\n\n  return [checked, toggle];\n}\n","import { charsetLabels, charsetShorts } from '@/Password/';\n\nimport { \n  DipSwitchProps,\n  useDipSwitchStorage,\n} from './useDipSwitchStorage';\n\nexport interface LabelProps {\n  charset: string;\n  checked: boolean;\n  id: string,\n}\n\nexport function Label({ id, charset, checked }: LabelProps): JSX.Element {\n  const label = charsetLabels[charset];\n  const short = charsetShorts[charset];\n  const hint = `${checked ? 'disable' : 'enable'} ${label} characters`.toLocaleLowerCase();\n  return (\n    <label className={'Frame Flame'} htmlFor={id} title={hint}>\n      <div className={'Large'}>\n        <label className='toggleWrapper' htmlFor={id} >\n          <div className='toggle' />\n        </label>\n        <p className='label'>{label}</p>\n      </div>\n      <div className={'Small'}>\n        <p className='label'>{short}</p>\n      </div>\n    </label>\n  );\n}\n\nexport function DipSwitch(props: DipSwitchProps): JSX.Element {\n  const [checked, toggle] = useDipSwitchStorage(props);\n  const id = `dipSwitch-${props.charset}`;\n  return (\n    <div className={'DipSwitch'} data-testid={id}>\n      <input\n        checked={checked}\n        className={'checkbox'}\n        id={id}\n        onChange={() => toggle(!checked)}\n        type={'checkbox'}\n      />\n      <Label \n        id={id} \n        charset={props.charset} \n        checked={checked} \n      />\n    </div>\n  );\n}\n","import {\n  MutableRefObject,\n  RefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\nimport { PasswordOptions, WordGenerator } from '@/Password';\n\nexport interface InfiniScrollState {\n\n  // container element for the infinite scroll\n  grid: RefObject<HTMLElement>;\n\n  // table data\n  list: InfiniCell[],\n\n  // infini scroll bottom of view observer\n  loader: RefObject<HTMLElement>;\n\n  // cell size observer\n  standard: RefObject<HTMLDivElement>;\n}\n\nexport interface InfiniCell {\n  // unique identifier for the cell\n  id: number;\n\n  // word length\n  length: number;\n\n  // consume and erase value\n  shred: (index: number) => void;\n\n  // actual value\n  value?: string;\n}\n\n\nexport interface ListModifiers {\n\n  // should the whole list be refreshed\n  full?: boolean;\n\n  // should a slice be replaced\n  slice?: boolean; \n\n  // consume and erase value\n  shred: (index: number) => void;\n\n  // number of visible lines in table\n  rows: MutableRefObject<number>;\n\n  // number of visible columns in table\n  cols: MutableRefObject<number>;\n\n  // write cursor index in array\n  index: MutableRefObject<number>;\n\n  // word length for placeholder\n  length: number;\n}\n\nexport interface Refresh {\n  done?: boolean,\n  full?: boolean,\n  slice?: boolean,\n}\n\nexport type Refresher = (options?: Refresh) => void;\n\nexport interface ResizeHandlerProps {\n  cols: MutableRefObject<number>;\n  rows: MutableRefObject<number>;\n\n  grid: RefObject<HTMLElement>;\n  standard: RefObject<HTMLDivElement>;\n\n  refresh: Refresher;\n}\n\nexport const getLastIndex = (list: InfiniCell[]): number => (list[list.length - 1]?.id ?? -1) + 1;\n\nexport const extendListToSize = (list: InfiniCell[], { length, cols, rows, shred }: ListModifiers): InfiniCell[] => {\n  const size = cols.current * rows.current;\n  if (list.length > size) {\n    return list.slice(0, size);\n  }\n  \n  let lastIndex = getLastIndex(list);\n  list = [...list];\n  while (list.length < size) {\n    list.push({ id: lastIndex++, length, shred, value: '' });\n  }\n  \n  return list;\n};\n\nexport const refreshList = (mods: ListModifiers) => (list: InfiniCell[]): InfiniCell[] => {\n\n  const {\n    cols,\n    full,\n    index,\n    rows,\n    slice,\n    shred,\n    length,\n  } = mods;\n\n  if (full) {\n    const lastIndex = getLastIndex(list);\n    list = [{ id: lastIndex, length, shred, value: '' }];\n    index.current = 0;\n  } else if (slice) {\n    const oneThird = Math.ceil(rows.current / 3) * cols.current;\n    list = list.slice(oneThird);\n    index.current = Math.max(0, index.current - oneThird);\n  }\n\n  return extendListToSize(list, mods);\n};\n\nexport function useInfiniScrollLoader(refresh: Refresher): [RefObject<HTMLElement>] {\n  const loader = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n\n    if (!loader.current) {\n      console.warn('useInfiniScroll IntersectionObserver not ready');\n      return;\n    }\n\n    const handleIntersection = ([{ isIntersecting }]: IntersectionObserverEntry[]) => {\n      if (isIntersecting) {\n        refresh({ slice: true });\n      }\n    };\n\n    const intersectionObserver = new IntersectionObserver(handleIntersection);\n    intersectionObserver.observe(loader.current);\n\n    return () => intersectionObserver.disconnect();\n\n  }, [refresh]);\n\n  return [loader];\n}\n\ninterface ResizeContext {\n  cw: number;\n  ch: number;\n  iw: number;\n  ih: number;\n}\n\nconst makeResizeContext = (): ResizeContext => ({\n  cw: 0,\n  ch: 0,\n  iw: 0,\n  ih: 0,\n});\n\nconst updateResizeContext = (props: ResizeHandlerProps, context: ResizeContext, entries: ResizeObserverEntry[]) => {\n  const { grid, standard } = props;\n  for (const { contentRect, target } of entries) {\n    if (target === standard.current) {\n      context.iw = contentRect.width + 8;\n      context.ih = contentRect.height + 8;\n    }\n\n    if (target === grid.current) {\n      context.cw = contentRect.width;\n      context.ch = contentRect.height;\n    }\n  }\n};\n\nexport function makeResizeHandler(props: ResizeHandlerProps) {\n\n  const context = makeResizeContext();\n  const handleResize = (entries: ResizeObserverEntry[]) => {\n\n    updateResizeContext(props, context, entries);\n    \n    let needRefresh = false;\n    if (context.iw && context.ih) {\n      const rows = Math.floor(context.ch / context.ih) * 2;\n      const cols = Math.floor(context.cw / context.iw);\n\n      if (props.rows.current != rows) {\n        props.rows.current = rows;\n        needRefresh = true;\n      }\n\n      if (props.cols.current != cols) {\n        props.cols.current = cols;\n        needRefresh = true;\n      }\n    }\n\n    if (needRefresh) {\n      props.refresh();\n    }\n  };\n\n  return handleResize;\n}\n\nexport function useInfiniScrollSize(\n  refresh: Refresher,\n  cols: MutableRefObject<number>,\n  rows: MutableRefObject<number>,\n): [RefObject<HTMLElement>, RefObject<HTMLDivElement>] {\n  const grid = useRef<HTMLElement>(null);\n  const standard = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n\n    if (!grid.current || !standard.current) {\n      console.warn('useInfiniScroll ResizeObserver not ready');\n      return;\n    }\n\n    const handleResize = makeResizeHandler({ cols, rows, grid, standard, refresh });\n    const resizeObserver = new ResizeObserver(handleResize);\n    resizeObserver.observe(grid.current);\n    resizeObserver.observe(standard.current);\n    return () => resizeObserver.disconnect();\n  }, [cols, rows, refresh]);\n\n  return [grid, standard];\n}\n\nconst promiseAnimationFrame = () => new Promise(resolve => requestAnimationFrame(resolve));\n\nconst fillList = (index: MutableRefObject<number>, value: string) => (oldList: InfiniCell[]) => {\n  const cell = oldList[index.current];\n\n  if (!cell) {\n    return oldList;\n  }\n\n  const newList = [...oldList];\n  newList[index.current] = {\n    ...cell,\n    value,\n  };\n\n  index.current++;\n  return newList;\n};\n\nconst shredder = (index: number) => (oldList: InfiniCell[]) => {\n  const cell = oldList[index];\n\n  if (!cell) {\n    return oldList;\n  }\n\n  const newList = [...oldList];\n  newList[index] = {\n    ...cell,\n    value: '',\n  };\n\n  return newList;\n};\n\nexport interface InfiniScrollProps extends PasswordOptions {\n  generator: WordGenerator;\n}\n\nexport function useInfiniScroll({ generator, length }: InfiniScrollProps): InfiniScrollState {\n\n  const [list, listUpdate] = useState<InfiniCell[]>([]);\n  const cols = useRef<number>(0);\n  const rows = useRef<number>(0);\n  const index = useRef<number>(0);\n\n  const [needRefresh, setRefresh] = useState<Refresh>({ done: true });\n  const refresh = useCallback((options?: Refresh) => \n    setRefresh((previous) => \n      ({ ...previous, ...options, done: false })), []);\n\n  const [loader] = useInfiniScrollLoader(refresh);\n  const [grid, standard] = useInfiniScrollSize(refresh, cols, rows);\n\n  useEffect(() => refresh({ full: true }), [generator, length, refresh]);\n\n  const shred = useCallback((index: number) => listUpdate(shredder(index)), []);\n\n  useEffect(() => {\n\n    if (needRefresh.done) {\n      return;\n    }\n\n    if (!length) {\n      return;\n    }\n\n    listUpdate(\n      refreshList({ \n        ...needRefresh,\n        cols,\n        index,\n        length,\n        shred,\n        rows,\n      })\n    );\n\n    setRefresh({ done: true });\n\n  }, [length, needRefresh, shred]);\n\n  useEffect(() => {\n    let alive = true;\n\n    if (!length) {\n      return;\n    }\n\n    Promise\n      .resolve()\n      .then(async () => {\n        const size = rows.current * cols.current;\n        while(alive && index.current < size) {\n          const value = await generator();\n          await promiseAnimationFrame();\n          listUpdate(fillList(index, value));\n        }\n      })\n      .catch(console.warn);\n\n    return () => {\n      alive = false;\n    };\n  }, [generator, length, needRefresh]);\n\n  return { grid, list, loader, standard };\n}\n","import { useCallback } from 'react';\n\nimport { InfiniCell, InfiniScrollProps, useInfiniScroll } from './useInfiniScroll';\n\nexport type renderInfiniScroll = (key: number) => JSX.Element;\n\nexport interface CellProps extends InfiniCell {\n  index: number;\n}\n\nexport function Cell(props: CellProps): JSX.Element {\n\n  const { id, index, length, shred, value = '' } = props;\n\n  const pbcopy = useCallback(() => {\n    if (value) {\n      navigator\n        .clipboard\n        .writeText(value)\n        .then(() => shred(index))\n        .catch(console.warn);\n    }\n  }, [index, shred, value]);\n\n  const displayWord = value.padEnd(length, '*');\n\n  const classNames = ['Password'];\n\n  if (value) {\n    classNames.push('Ready');\n  }\n\n  return (\n    <button \n      className={classNames.join(' ')} \n      disabled={!value} \n      id={`${id}`} \n      onClick={pbcopy}\n    >\n      {displayWord}\n    </button>\n  );\n}\n\nexport function InfiniScroll(props: InfiniScrollProps): JSX.Element {\n  const { \n    grid, \n    list, \n    loader,\n    standard, \n  } = useInfiniScroll(props);\n\n  const render = (cell: InfiniCell, index: number) => \n    <Cell key={cell.id} {...cell} index={index} />;\n\n  return (\n    <section className={'InfiniScroll'} ref={grid}>\n      <div className={'Standard'} ref={standard}>\n        <Cell id={-1} {...props} index={-1} shred={() => undefined} />\n      </div>\n      <div className={'Grid'}>\n        {list.map(render)}\n        <nav ref={loader} />\n      </div>\n    </section>\n  );\n}\n","import { useEffect, useState } from 'react';\n\ntype UpdateLength = (length: number) => void;\n\nexport interface LengthProps {\n  update: UpdateLength;\n}\n\nexport const lengthStoragePath = 'pwgen-length';\n\n\nexport function loadLengthStorage(): number {\n  try {\n    const serialized = localStorage.getItem(lengthStoragePath) ?? '8';\n    return JSON.parse(serialized) as number;\n  } catch ({ message }) {\n    console.warn(message);\n    return 8;\n  }\n}\n\nexport const saveLengthStorage = (value: number): Promise<void> => \n  Promise\n    .resolve()\n    .then(() => localStorage.setItem(lengthStoragePath, JSON.stringify(value)))\n    .catch(() => undefined);\n\ninterface LengthMap {\n  [key: number]: number;\n}\n\nconst lengthMap: LengthMap = {\n  8: 12,\n  12: 16,\n  16: 24,\n  24: 32,\n  32: 8,\n};\n\nexport type Toggle = () => void;\n\nexport function useLengthStorage({ update }: LengthProps): [number, Toggle] {\n\n  const [length, setValue] = useState<number>(loadLengthStorage);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => update(length), []);\n\n  const chainUpdate = (newState: number) => {\n    update(newState);\n    setValue(newState);\n    void saveLengthStorage(newState);\n  };\n\n  const toggle = () => chainUpdate(lengthMap[length] ?? 8);\n\n  return [length, toggle];\n}\n","import { LengthProps, useLengthStorage } from './useLengthStorage';\n\nexport function Length(props: LengthProps): JSX.Element {\n\n  const [length, toggle] = useLengthStorage(props);\n\n  const id = 'Length';\n  const hint = 'change the length of the password';\n\n  return (\n    <button\n      className={'Frame Flame Length'} data-testid={id}\n      onClick={() => toggle()}\n      type={'submit'}\n      title={hint}\n    >{length}</button>\n  );\n}\n","import { DipSwitch } from '@/DipSwitch/';\nimport { InfiniScroll } from '@/InfiniScroll/';\nimport { Length } from '@/Length/';\nimport { \n  CharsetState,\n  UpdatePasswordOptions,\n  usePasswordContext,\n} from '@/Password/';\n\nexport interface ControlProps {\n  update: UpdatePasswordOptions;\n}\n\nexport function Control({ update }: ControlProps): JSX.Element {\n  const updateCharset = (charset: CharsetState) => update({ charset });\n  const updateLength = (length: number) => update({length});\n  return (\n    <div className={'Controls'}>\n      <Length update={updateLength}/>\n      <DipSwitch charset={'AZ'} update={updateCharset} />\n      <DipSwitch charset={'09'} update={updateCharset} />\n      <DipSwitch charset={'SM'} update={updateCharset} />\n    </div>\n  );\n}\n\nexport function App(): JSX.Element {\n  const context = usePasswordContext();\n  return (\n    <div className=\"App\">\n      <main>\n        <InfiniScroll {...context} />\n      </main>\n      <header>\n        <Control {...context} />\n      </header>\n    </div>\n  );\n}\n","const scriptRel = 'modulepreload';const seen = {};const base = '/pwgen/';export const __vitePreload = function preload(baseModule, deps) {\n    // @ts-ignore\n    if (!__VITE_IS_MODERN__ || !deps || deps.length === 0) {\n        return baseModule();\n    }\n    return Promise.all(deps.map((dep) => {\n        // @ts-ignore\n        dep = `${base}${dep}`;\n        // @ts-ignore\n        if (dep in seen)\n            return;\n        // @ts-ignore\n        seen[dep] = true;\n        const isCss = dep.endsWith('.css');\n        const cssSelector = isCss ? '[rel=\"stylesheet\"]' : '';\n        // @ts-ignore check if the file is already preloaded by SSR markup\n        if (document.querySelector(`link[href=\"${dep}\"]${cssSelector}`)) {\n            return;\n        }\n        // @ts-ignore\n        const link = document.createElement('link');\n        // @ts-ignore\n        link.rel = isCss ? 'stylesheet' : scriptRel;\n        if (!isCss) {\n            link.as = 'script';\n            link.crossOrigin = '';\n        }\n        link.href = dep;\n        // @ts-ignore\n        document.head.appendChild(link);\n        if (isCss) {\n            return new Promise((res, rej) => {\n                link.addEventListener('load', res);\n                link.addEventListener('error', rej);\n            });\n        }\n    })).then(() => baseModule());\n}","// https://bit.ly/CRA-vitals\nimport type { ReportHandler } from 'web-vitals';\n\nexport function reportWebVitals(onPerfEntry?: ReportHandler): void {\n  if (!(onPerfEntry instanceof Function)) {\n    return;\n  }\n\n  import('web-vitals')\n    .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    })\n    .catch(({ stack }) => console.warn(stack));\n}\n","import '@/main.scss';\n\nimport ReactDOM from 'react-dom';\n\nimport { App } from '@/App';\nimport { reportWebVitals } from '@/reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"names":["relList","document","createElement","supports","link","querySelectorAll","MutationObserver","mutations","mutation","type","node","addedNodes","tagName","rel","observe","childList","subtree","ep","fetchOpts","script","integrity","referrerpolicy","referrerPolicy","crossorigin","credentials","getFetchOpts","href","p","charsetLabels","charsetShorts","charsetMapping","toRealSet","key","value","length","charset","random","word","prev","n","pop","constructor","range","Uint32Array","this","index","getRandomValues","array","args","Promise","resolve","Error","Array","from","Set","flat","join","getCharset","Random","then","pwgenImpl","pending","useRef","current","setOptions","useState","debounce","delay","context","useCallback","callback","timeout","setTimeout","clearTimeout","useDebounce","generator","pwgenFactory","Object","entries","map","usePasswordGenerator","__spreadProps","update","options","oldOptions","newOptions","__spreadValues","left","right","JSON","stringify","charsetStoragePath","checked","setChecked","serialized","getItem","parse","message","warn","loadDipSwitchStorage","chainUpdate","newState","path","localStorage","setItem","catch","saveDipSwitchStorage","id","label","short","hint","toLocaleLowerCase","className","htmlFor","title","props","toggle","useDipSwitchStorage","onChange","Label","getLastIndex","list","refreshList","mods","cols","full","rows","slice","shred","oneThird","Math","ceil","max","size","lastIndex","push","extendListToSize","refresh","grid","standard","handleResize","cw","ch","iw","ih","contentRect","target","width","height","needRefresh","floor","makeResizeHandler","resizeObserver","ResizeObserver","disconnect","fillList","oldList","cell","newList","listUpdate","setRefresh","done","previous","loader","intersectionObserver","IntersectionObserver","isIntersecting","useInfiniScrollLoader","useInfiniScrollSize","index2","shredder","alive","async","requestAnimationFrame","console","pbcopy","clipboard","writeText","displayWord","padEnd","classNames","disabled","onClick","useInfiniScroll","ref","Cell","lengthMap","setValue","loadLengthStorage","useLengthStorage","updateCharset","Length","DipSwitch","usePasswordContext","InfiniScroll","Control","seen","onPerfEntry","baseModule","deps","ReactDOM","render","App","getElementById","Function","all","dep","isCss","endsWith","cssSelector","querySelector","as","crossOrigin","head","appendChild","res","rej","addEventListener","getCLS","getFID","getFCP","getLCP","getTTFB","stack"],"mappings":"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"}