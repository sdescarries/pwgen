{"version":3,"file":"index.273dfaac.js","sources":["../../vite/modulepreload-polyfill","../../src/Password/charset.ts","../../src/Password/pwgenImpl.ts","../../src/Password/Random.ts","../../src/Password/pwgenFactory.ts","../../src/Password/useDebounce.ts","../../src/Password/usePasswordGenerator.tsx","../../src/DipSwitch/useDipSwitchStorage.ts","../../src/DipSwitch/DipSwitch.tsx","../../src/InfiniScroll/useInfiniScroll.ts","../../src/InfiniScroll/InfiniScroll.tsx","../../src/Length/useLengthStorage.ts","../../src/Length/Length.tsx","../../src/App/App.tsx","../../vite/preload-helper","../../src/reportWebVitals.ts","../../src/main.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { CharsetLabels } from './types';\n\nexport const charsetLabels: CharsetLabels = {\n  ['09']: 'Number',\n  ['AZ']: 'Upper Case',\n  ['SM']: 'Symbol',\n};\n\nexport const charsetShorts: CharsetLabels = {\n  ['09']: '9',\n  ['AZ']: 'Z',\n  ['SM']: '#',\n};\n\nexport const alphaLower = 'abcdefghijklmnopqrstuvwxyz';\nexport const alphaUpper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nexport const numerical = '0123456789';\nexport const symbol = '=+-*@$%!&?,.:;^#(){}[]|';\n\nexport const charsetMapping: CharsetLabels = {\n  ['09']: numerical,\n  ['AZ']: alphaUpper,\n  ['SM']: symbol,\n  ['az']: alphaLower,\n};\n\nexport const toRealSet = ([key, value]: [string, boolean]): string => \n  (value ? charsetMapping[key] : '');\n\nexport const getCharset = (...args: string[]): string[] =>\n  Array.from(new Set(args.flat().join('')));\n","import type { Random } from './Random';\n\nexport interface PwgenProps {\n  length: number;\n  charset: string[];\n  random: Random;\n}\n\nexport function pwgenImpl({ length, charset, random }: PwgenProps): string {\n  // Output word\n  let word = '';\n  let prev = -1;\n\n  // Add random chars form set for desired length\n  for (let n = 0; n < length; ++n) {\n    let key;\n\n    // Prevent consecutive chars from being the same\n    do {\n      key = random.pop();\n    } while (key === prev);\n\n    prev = key;\n    word += charset[key];\n  }\n\n  return word;\n}\n","export class Random {\n  array = new Uint32Array(1024);\n  index = 1024;\n  range: number;\n\n  constructor(range: number) {\n    this.range = range;\n  }\n\n  pop(): number {\n    if (this.index >= 1024) {\n      crypto.getRandomValues(this.array);\n      this.index = 0;\n    }\n    return this.array[this.index++] % this.range;\n  }\n}\n","import { getCharset } from './charset';\nimport { pwgenImpl } from './pwgenImpl';\nimport { Random } from './Random';\nimport { WordGenerator } from './types';\n\n\nexport function pwgenFactory(length: number, ...args: string[]): WordGenerator {\n\n  if (length === 0) {\n    return (): Promise<string> => Promise.resolve('');\n  }\n\n  if (length < 4) {\n    throw new Error(`length too short ${length}`);\n  }\n\n  const charset = getCharset(...args);\n\n  if (charset.length < 1) {\n    throw new Error('empty charset');\n  }\n\n  if (crypto?.getRandomValues == null) {\n    throw new Error('missing crypto facility');\n  }\n\n  const random = new Random(charset.length);\n\n  return (): Promise<string> =>\n    Promise.resolve({ length, charset, random }).then(pwgenImpl);\n}","import { useCallback, useEffect, useRef } from 'react';\n\nexport interface DebounceContext {\n  timeout?: number;\n}\n\nexport type DebounceCallback = () => void;\nexport type Debounce = (callback: DebounceCallback) => void;\nexport function useDebounce(delay: number): Debounce {\n  const context = useRef<DebounceContext>({ });\n\n  const debounce = useCallback<Debounce>((callback: DebounceCallback): void => {\n    clearTimeout(context.current.timeout);\n    context.current.timeout = setTimeout(callback, delay) as unknown as number;\n  }, [delay]);\n\n  useEffect(() => () => clearTimeout(context.current.timeout), [delay]);\n\n  return debounce;\n}\n","import { useRef, useState } from 'react';\n\nimport { \n  alphaLower, \n  toRealSet,\n} from './charset';\nimport { pwgenFactory } from './pwgenFactory';\nimport { \n  PasswordOptions, \n  PasswordUserOptions, \n  UpdatePasswordOptions, \n  WordGenerator,\n} from './types';\nimport { useDebounce } from './useDebounce';\n\nexport const combinePasswordOptions = (\n  oldOptions?: PasswordUserOptions, \n  newOptions?: PasswordUserOptions\n): PasswordOptions => ({\n  charset: {\n    ...oldOptions?.charset,\n    ...newOptions?.charset,\n  },\n  length: newOptions?.length ?? oldOptions?.length ?? 8,\n});\n\nexport const deepEqual = (left: object, right: object): boolean => {\n  const leftStr = JSON.stringify(left);\n  const rightStr = JSON.stringify(right);\n  return leftStr === rightStr;\n};\n\nexport function usePasswordGenerator({ length, charset }: PasswordOptions): WordGenerator {\n  const realSets = Object.entries<boolean>(charset).map(toRealSet);\n  return pwgenFactory(length, alphaLower, ...realSets);\n}\n\ninterface PasswordContext extends PasswordOptions {\n  generator: WordGenerator;\n  update: UpdatePasswordOptions;\n}\n\nexport function usePasswordContext(): PasswordContext {\n  const pending = useRef<PasswordOptions>({ charset: {}, length: 0 });\n  const [current, setOptions] = useState<PasswordOptions>(pending.current);\n  const debounce = useDebounce(200);\n  const generator = usePasswordGenerator(current);\n\n  const update: UpdatePasswordOptions = (options: PasswordUserOptions) => {\n    pending.current = combinePasswordOptions(pending.current, options);\n    debounce(() => {\n      if (!deepEqual(current, pending.current)) {\n        setOptions(pending.current);\n      }\n    });\n  };\n\n  return ({\n    ...current,\n    generator,\n    update,\n  });\n}\n","import { Dispatch, useEffect, useState } from 'react';\n\nimport { CharsetState } from '@/Password/';\n\nexport type UpdateCharsetState = (state: CharsetState) => void;\nexport interface DipSwitchProps {\n  charset: string;\n  update: UpdateCharsetState;\n}\n\nexport const charsetStoragePath = (charset: string): string => \n  `pwgen-charset-${charset}`;\n\n\nexport function loadDipSwitchStorage(charset: string): boolean {\n  try {\n    const serialized = localStorage.getItem(charsetStoragePath(charset)) ?? 'false';\n    return JSON.parse(serialized) as boolean;\n  } catch ({ message }) {\n    console.warn(message);\n    return false;\n  }\n}\n\nexport const saveDipSwitchStorage = (charset: string, value: boolean): Promise<void> => \n  Promise\n    .resolve()\n    .then(() => charsetStoragePath(charset))\n    .then((path) => localStorage.setItem(path, JSON.stringify(value)))\n    .catch(() => undefined);\n\nexport function useDipSwitchStorage({ charset, update }: DipSwitchProps): [boolean, Dispatch<boolean>] {\n\n  const [checked, setChecked] = useState<boolean>(() => loadDipSwitchStorage(charset));\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => update({ [charset]: checked }), []);\n\n  const chainUpdate = (newState: boolean) => {\n    update({ [charset]: newState });\n    setChecked(newState);\n    void saveDipSwitchStorage(charset, newState);\n  };\n\n  const toggle = () => chainUpdate(!checked);\n\n  return [checked, toggle];\n}\n","import { charsetLabels, charsetShorts } from '@/Password/';\n\nimport { \n  DipSwitchProps,\n  useDipSwitchStorage,\n} from './useDipSwitchStorage';\n\nexport interface LabelProps {\n  charset: string;\n  checked: boolean;\n  id: string,\n}\n\nexport function Label({ id, charset, checked }: LabelProps): JSX.Element {\n  const label = charsetLabels[charset];\n  const short = charsetShorts[charset];\n  const hint = `${checked ? 'disable' : 'enable'} ${label} characters`.toLocaleLowerCase();\n  return (\n    <label className={'Frame Flame'} htmlFor={id} title={hint}>\n      <div className={'Large'}>\n        <label className='toggleWrapper' htmlFor={id} >\n          <div className='toggle' />\n        </label>\n        <p className='label'>{label}</p>\n      </div>\n      <div className={'Small'}>\n        <p className='label'>{short}</p>\n      </div>\n    </label>\n  );\n}\n\nexport function DipSwitch(props: DipSwitchProps): JSX.Element {\n  const [checked, toggle] = useDipSwitchStorage(props);\n  const id = `dipSwitch-${props.charset}`;\n  return (\n    <div className={'DipSwitch'} data-testid={id}>\n      <input\n        checked={checked}\n        className={'checkbox'}\n        id={id}\n        onChange={() => toggle(!checked)}\n        type={'checkbox'}\n      />\n      <Label \n        id={id} \n        charset={props.charset} \n        checked={checked} \n      />\n    </div>\n  );\n}\n","import {\n  MutableRefObject,\n  RefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\nimport { PasswordOptions, WordGenerator } from '@/Password';\nimport { useDebounce } from '@/Password/useDebounce';\n\nexport interface InfiniScrollState {\n\n  // container element for the infinite scroll\n  grid: RefObject<HTMLElement>;\n\n  // table data\n  list: InfiniCell[],\n\n  // infini scroll bottom of view observer\n  loader: RefObject<HTMLElement>;\n\n  // cell size observer\n  standard: RefObject<HTMLDivElement>;\n}\n\nexport interface InfiniCell {\n  // unique identifier for the cell\n  id: number;\n\n  // word length\n  length: number;\n\n  // consume and erase value\n  shred: (index: number) => void;\n\n  // actual value\n  value?: string;\n}\n\n\nexport interface ListModifiers {\n\n  // should the whole list be refreshed\n  full?: boolean;\n\n  // should a slice be replaced\n  slice?: boolean;\n\n  // consume and erase value\n  shred: (index: number) => void;\n\n  // number of visible lines in table\n  rows: MutableRefObject<number>;\n\n  // number of visible columns in table\n  cols: MutableRefObject<number>;\n\n  // write cursor index in array\n  index: MutableRefObject<number>;\n\n  // word length for placeholder\n  length: number;\n}\n\nexport interface Refresh {\n  done?: boolean,\n  full?: boolean,\n  slice?: boolean,\n}\n\nexport type Refresher = (options?: Refresh) => void;\n\nexport interface ResizeHandlerProps {\n  cols: MutableRefObject<number>;\n  rows: MutableRefObject<number>;\n\n  grid: RefObject<HTMLElement>;\n  standard: RefObject<HTMLDivElement>;\n\n  refresh: Refresher;\n}\n\nexport const getLastIndex = (list: InfiniCell[]): number => (list[list.length - 1]?.id ?? -1) + 1;\n\nexport const extendListToSize = (list: InfiniCell[], { length, cols, rows, shred }: ListModifiers): InfiniCell[] => {\n  const size = cols.current * rows.current;\n  if (list.length > size) {\n    return list.slice(0, size);\n  }\n\n  let lastIndex = getLastIndex(list);\n  list = [...list];\n  while (list.length < size) {\n    list.push({ id: lastIndex++, length, shred, value: '' });\n  }\n\n  return list;\n};\n\nexport const refreshList = (mods: ListModifiers) => (list: InfiniCell[]): InfiniCell[] => {\n  const { cols, full, index, length, rows, shred, slice } = mods;\n  if (full) {\n    const lastIndex = getLastIndex(list);\n    list = [{ id: lastIndex, length, shred, value: '' }];\n    index.current = 0;\n  } else if (slice) {\n    const oneThird = Math.ceil(rows.current / 3) * cols.current;\n    list = list.slice(oneThird);\n    index.current = Math.max(0, index.current - oneThird);\n  }\n\n  return extendListToSize(list, mods);\n};\n\ntype noop = () => void;\n\nconst makeIntersectionHandler = (callback: noop) =>\n  ([{ isIntersecting }]: IntersectionObserverEntry[]) => {\n    if (isIntersecting) {\n      callback();\n    }\n  };\n\nexport function observeLoaderEffect(loader: RefObject<HTMLElement>, callback: noop) {\n  if (!loader.current) {\n    console.warn('useInfiniScroll IntersectionObserver not ready');\n    return;\n  }\n  const handleIntersection = makeIntersectionHandler(callback);\n  const intersectionObserver = new IntersectionObserver(handleIntersection);\n  intersectionObserver.observe(loader.current);\n  return () => intersectionObserver.disconnect();\n}\n\nexport function loaderIntersectsViewport(loader: RefObject<HTMLElement>, callback: noop): void {\n  const rect = loader.current?.getBoundingClientRect();\n  if (!rect) return;\n  if (rect.bottom > window.innerHeight) return;\n  if (rect.right > window.innerWidth) return;\n  callback();\n}\n\nexport function intersectionInterval(loader: RefObject<HTMLElement>, callback: noop): noop {\n  const interval = setInterval(() => loaderIntersectsViewport(loader, callback), 200);\n  return () => clearInterval(interval);\n}\n\nexport function useInfiniScrollLoader(refresh: Refresher): [RefObject<HTMLElement>] {\n  const loader = useRef<HTMLElement>(null);\n  const debounce = useDebounce(100);\n  const callback = useCallback(() =>\n    debounce(() =>\n      refresh({ slice: true })\n    ), [debounce, refresh]);\n\n  useEffect(() => observeLoaderEffect(loader, callback), [callback]);\n  useEffect(() => intersectionInterval(loader, callback), [callback]);\n\n  return [loader];\n}\n\ninterface ResizeContext {\n  cw: number;\n  ch: number;\n  iw: number;\n  ih: number;\n}\n\nconst makeResizeContext = (): ResizeContext => ({\n  cw: 0,\n  ch: 0,\n  iw: 0,\n  ih: 0,\n});\n\nconst updateResizeContext = (props: ResizeHandlerProps, context: ResizeContext, entries: ResizeObserverEntry[]) => {\n  const { grid, standard } = props;\n  for (const { contentRect, target } of entries) {\n    if (target === standard.current) {\n      context.iw = contentRect.width + 8;\n      context.ih = contentRect.height + 8;\n    }\n\n    if (target === grid.current) {\n      context.cw = contentRect.width;\n      context.ch = contentRect.height;\n    }\n  }\n};\n\nexport function makeResizeHandler(props: ResizeHandlerProps) {\n\n  const context = makeResizeContext();\n  const handleResize = (entries: ResizeObserverEntry[]) => {\n\n    updateResizeContext(props, context, entries);\n\n    let needRefresh = false;\n    if (context.iw && context.ih) {\n      const rows = Math.floor(context.ch / context.ih) * 2;\n      const cols = Math.floor(context.cw / context.iw);\n\n      if (props.rows.current != rows) {\n        props.rows.current = rows;\n        needRefresh = true;\n      }\n\n      if (props.cols.current != cols) {\n        props.cols.current = cols;\n        needRefresh = true;\n      }\n    }\n\n    if (needRefresh) {\n      props.refresh();\n    }\n  };\n\n  return handleResize;\n}\n\nexport function useInfiniScrollSize(\n  refresh: Refresher,\n  cols: MutableRefObject<number>,\n  rows: MutableRefObject<number>,\n): [RefObject<HTMLElement>, RefObject<HTMLDivElement>] {\n  const grid = useRef<HTMLElement>(null);\n  const standard = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n\n    if (!grid.current || !standard.current) {\n      console.warn('useInfiniScroll ResizeObserver not ready');\n      return;\n    }\n\n    const handleResize = makeResizeHandler({ cols, rows, grid, standard, refresh });\n    const resizeObserver = new ResizeObserver(handleResize);\n    resizeObserver.observe(grid.current);\n    resizeObserver.observe(standard.current);\n    return () => resizeObserver.disconnect();\n  }, [cols, rows, refresh]);\n\n  return [grid, standard];\n}\n\nconst promiseAnimationFrame = () => new Promise(resolve => requestAnimationFrame(resolve));\n\nconst fillList = (index: MutableRefObject<number>, value: string) => (oldList: InfiniCell[]) => {\n  const cell = oldList[index.current];\n\n  if (!cell) {\n    return oldList;\n  }\n\n  const newList = [...oldList];\n  newList[index.current] = {\n    ...cell,\n    value,\n  };\n\n  index.current++;\n  return newList;\n};\n\nconst shredder = (index: number) => (oldList: InfiniCell[]) => {\n  const cell = oldList[index];\n\n  if (!cell) {\n    return oldList;\n  }\n\n  const newList = [...oldList];\n  newList[index] = {\n    ...cell,\n    value: '',\n  };\n\n  return newList;\n};\n\nexport interface InfiniScrollProps extends PasswordOptions {\n  generator: WordGenerator;\n}\n\nexport function useInfiniScroll({ generator, length }: InfiniScrollProps): InfiniScrollState {\n\n  const [list, listUpdate] = useState<InfiniCell[]>([]);\n  const cols = useRef<number>(0);\n  const rows = useRef<number>(0);\n  const index = useRef<number>(0);\n\n  const [needRefresh, setRefresh] = useState<Refresh>({ done: true });\n  const refresh = useCallback((options?: Refresh) =>\n    setRefresh((previous) =>\n      ({ ...previous, ...options, done: false })), []);\n\n  const [loader] = useInfiniScrollLoader(refresh);\n  const [grid, standard] = useInfiniScrollSize(refresh, cols, rows);\n\n  useEffect(() => refresh({ full: true }), [generator, length, refresh]);\n\n  const shred = useCallback((index: number) => listUpdate(shredder(index)), []);\n\n  useEffect(() => {\n\n    if (needRefresh.done) return;\n    if (!length) return;\n\n    listUpdate(refreshList({...needRefresh, cols, rows, index, length, shred }));\n    setRefresh({ done: true });\n  }, [length, needRefresh, shred]);\n\n  useEffect(() => {\n    if (!length) return;\n\n    let alive = true;\n    Promise\n      .resolve()\n      .then(async () => {\n        const size = rows.current * cols.current;\n        while(alive && index.current < size) {\n          const [value] = await Promise.all([\n            generator(),\n            promiseAnimationFrame(),\n          ]);\n          listUpdate(fillList(index, value));\n        }\n      })\n      .catch(console.warn);\n\n    return () => {\n      alive = false;\n    };\n  }, [generator, length, needRefresh]);\n\n  return { grid, list, loader, standard };\n}\n","import { useCallback } from 'react';\n\nimport { InfiniCell, InfiniScrollProps, useInfiniScroll } from './useInfiniScroll';\n\nexport type renderInfiniScroll = (key: number) => JSX.Element;\n\nexport interface CellProps extends InfiniCell {\n  index: number;\n}\n\nexport function Cell(props: CellProps): JSX.Element {\n\n  const { id, index, length, shred, value = '' } = props;\n\n  const pbCopy = useCallback(() => {\n    if (value) {\n      navigator\n        .clipboard\n        .writeText(value)\n        .then(() => shred(index))\n        .catch(console.warn);\n    }\n  }, [index, shred, value]);\n\n  const displayWord = value.padEnd(length, '*');\n\n  const classNames = ['Password'];\n\n  if (value) {\n    classNames.push('Ready');\n  }\n\n  return (\n    <button\n      className={classNames.join(' ')}\n      disabled={!value}\n      id={`${id}`}\n      onClick={pbCopy}\n    >\n      {displayWord}\n    </button>\n  );\n}\n\nexport function InfiniScroll(props: InfiniScrollProps): JSX.Element {\n  const {\n    grid,\n    list,\n    loader,\n    standard,\n  } = useInfiniScroll(props);\n\n  const render = (cell: InfiniCell, index: number) =>\n    <Cell key={cell.id} {...cell} index={index} />;\n\n  return (\n    <section className={'InfiniScroll'} ref={grid}>\n      <div className={'Standard'} ref={standard}>\n        <Cell id={-1} {...props} index={-1} shred={() => undefined} />\n      </div>\n      <div className={'Grid'}>\n        {list.map(render)}\n        <nav ref={loader} />\n      </div>\n    </section>\n  );\n}\n","import { useEffect, useState } from 'react';\n\ntype UpdateLength = (length: number) => void;\n\nexport interface LengthProps {\n  update: UpdateLength;\n}\n\nexport const lengthStoragePath = 'pwgen-length';\n\n\nexport function loadLengthStorage(): number {\n  try {\n    const serialized = localStorage.getItem(lengthStoragePath) ?? '8';\n    return JSON.parse(serialized) as number;\n  } catch ({ message }) {\n    console.warn(message);\n    return 8;\n  }\n}\n\nexport const saveLengthStorage = (value: number): Promise<void> => \n  Promise\n    .resolve()\n    .then(() => localStorage.setItem(lengthStoragePath, JSON.stringify(value)))\n    .catch(() => undefined);\n\ninterface LengthMap {\n  [key: number]: number;\n}\n\nconst lengthMap: LengthMap = {\n  8: 12,\n  12: 16,\n  16: 24,\n  24: 32,\n  32: 8,\n};\n\nexport type Toggle = () => void;\n\nexport function useLengthStorage({ update }: LengthProps): [number, Toggle] {\n\n  const [length, setValue] = useState<number>(loadLengthStorage);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => update(length), []);\n\n  const chainUpdate = (newState: number) => {\n    update(newState);\n    setValue(newState);\n    void saveLengthStorage(newState);\n  };\n\n  const toggle = () => chainUpdate(lengthMap[length] ?? 8);\n\n  return [length, toggle];\n}\n","import { LengthProps, useLengthStorage } from './useLengthStorage';\n\nexport function Length(props: LengthProps): JSX.Element {\n\n  const [length, toggle] = useLengthStorage(props);\n\n  const id = 'Length';\n  const hint = 'change the length of the password';\n\n  return (\n    <button\n      className={'Frame Flame Length'} data-testid={id}\n      onClick={() => toggle()}\n      type={'submit'}\n      title={hint}\n    >{length}</button>\n  );\n}\n","import { DipSwitch } from '@/DipSwitch/';\nimport { InfiniScroll } from '@/InfiniScroll/';\nimport { Length } from '@/Length/';\nimport { \n  CharsetState,\n  UpdatePasswordOptions,\n  usePasswordContext,\n} from '@/Password/';\n\nexport interface ControlProps {\n  update: UpdatePasswordOptions;\n}\n\nexport function Control({ update }: ControlProps): JSX.Element {\n  const updateCharset = (charset: CharsetState) => update({ charset });\n  const updateLength = (length: number) => update({length});\n  return (\n    <div className={'Controls'}>\n      <Length update={updateLength}/>\n      <DipSwitch charset={'AZ'} update={updateCharset} />\n      <DipSwitch charset={'09'} update={updateCharset} />\n      <DipSwitch charset={'SM'} update={updateCharset} />\n    </div>\n  );\n}\n\nexport function App(): JSX.Element {\n  const context = usePasswordContext();\n  return (\n    <div className=\"App\">\n      <main>\n        <InfiniScroll {...context} />\n      </main>\n      <header>\n        <Control {...context} />\n      </header>\n    </div>\n  );\n}\n","const scriptRel = 'modulepreload';const seen = {};const base = '/pwgen/';export const __vitePreload = function preload(baseModule, deps) {\n    // @ts-ignore\n    if (!__VITE_IS_MODERN__ || !deps || deps.length === 0) {\n        return baseModule();\n    }\n    return Promise.all(deps.map((dep) => {\n        // @ts-ignore\n        dep = `${base}${dep}`;\n        // @ts-ignore\n        if (dep in seen)\n            return;\n        // @ts-ignore\n        seen[dep] = true;\n        const isCss = dep.endsWith('.css');\n        const cssSelector = isCss ? '[rel=\"stylesheet\"]' : '';\n        // @ts-ignore check if the file is already preloaded by SSR markup\n        if (document.querySelector(`link[href=\"${dep}\"]${cssSelector}`)) {\n            return;\n        }\n        // @ts-ignore\n        const link = document.createElement('link');\n        // @ts-ignore\n        link.rel = isCss ? 'stylesheet' : scriptRel;\n        if (!isCss) {\n            link.as = 'script';\n            link.crossOrigin = '';\n        }\n        link.href = dep;\n        // @ts-ignore\n        document.head.appendChild(link);\n        if (isCss) {\n            return new Promise((res, rej) => {\n                link.addEventListener('load', res);\n                link.addEventListener('error', () => rej(new Error(`Unable to preload CSS for ${dep}`)));\n            });\n        }\n    })).then(() => baseModule());\n}","// https://bit.ly/CRA-vitals\nimport type { ReportHandler } from 'web-vitals';\n\nexport function reportWebVitals(onPerfEntry?: ReportHandler): void {\n  if (!(onPerfEntry instanceof Function)) {\n    return;\n  }\n\n  import('web-vitals')\n    .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    })\n    .catch(({ stack }) => console.warn(stack));\n}\n","import '@/main.scss';\n\nimport ReactDOM from 'react-dom';\n\nimport { App } from '@/App';\nimport { reportWebVitals } from '@/reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"names":["useRef","useCallback","useState"],"mappings":"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"}